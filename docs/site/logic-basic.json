{
  "title": "Logic Building Problems - B√°sico",
  "description": "Problemas b√°sicos de construcci√≥n de l√≥gica de programaci√≥n para principiantes",
  "version": "1.0",
  "lastUpdated": "2025-08-21",
  "difficulty": "basic",
  "section": {
    "id": "logic-basic",
    "title": "üü¢ Logic Building - Problemas B√°sicos",
    "description": "Problemas fundamentales para desarrollar l√≥gica de programaci√≥n paso a paso",
    "subsections": [
      {
        "id": "check-even-odd",
        "title": "Check Even or Odd",
        "type": "logic-problem",
        "content": "<strong>Problema:</strong> Dado un n√∫mero n, determinar si es par o impar. Retornar true para par y false para impar.<br><br><strong>Ejemplos:</strong><br>‚Ä¢ Input: n = 15, Output: false (15 % 2 = 1, entonces 15 es impar)<br>‚Ä¢ Input: n = 44, Output: true (44 % 2 = 0, entonces 44 es par)<br><br><strong>Soluci√≥n:</strong><br>```javascript<br>function isEven(n) {<br>    return n % 2 === 0;<br>}<br>```<br><br><strong>L√≥gica:</strong> Un n√∫mero es par si el residuo de dividirlo entre 2 es 0."
      },
      {
        "id": "multiplication-table",
        "title": "Multiplication Table",
        "type": "logic-problem",
        "content": "<strong>Problema:</strong> Generar la tabla de multiplicar de un n√∫mero dado n hasta un l√≠mite espec√≠fico.<br><br><strong>Ejemplos:</strong><br>‚Ä¢ Input: n = 5, limit = 10<br>‚Ä¢ Output: 5x1=5, 5x2=10, 5x3=15... 5x10=50<br><br><strong>Soluci√≥n:</strong><br>```javascript<br>function multiplicationTable(n, limit) {<br>    const result = [];<br>    for (let i = 1; i <= limit; i++) {<br>        result.push(`${n} x ${i} = ${n * i}`);<br>    }<br>    return result;<br>}<br>```<br><br><strong>L√≥gica:</strong> Iterar desde 1 hasta el l√≠mite y multiplicar cada n√∫mero por n."
      },
      {
        "id": "sum-of-naturals",
        "title": "Sum of Natural Numbers",
        "type": "logic-problem",
        "content": "<strong>Problema:</strong> Calcular la suma de los primeros n n√∫meros naturales.<br><br><strong>Ejemplos:</strong><br>‚Ä¢ Input: n = 5, Output: 15 (1+2+3+4+5)<br>‚Ä¢ Input: n = 10, Output: 55<br><br><strong>Soluci√≥n Iterativa:</strong><br>```javascript<br>function sumNaturals(n) {<br>    let sum = 0;<br>    for (let i = 1; i <= n; i++) {<br>        sum += i;<br>    }<br>    return sum;<br>}<br>```<br><br><strong>Soluci√≥n Matem√°tica:</strong><br>```javascript<br>function sumNaturals(n) {<br>    return (n * (n + 1)) / 2;<br>}<br>```<br><br><strong>L√≥gica:</strong> Suma aritm√©tica o f√≥rmula matem√°tica directa."
      },
      {
        "id": "sum-of-squares",
        "title": "Sum of Squares of Natural Numbers",
        "type": "logic-problem",
        "content": "<strong>Problema:</strong> Calcular la suma de los cuadrados de los primeros n n√∫meros naturales.<br><br><strong>Ejemplos:</strong><br>‚Ä¢ Input: n = 3, Output: 14 (1¬≤ + 2¬≤ + 3¬≤ = 1+4+9)<br>‚Ä¢ Input: n = 4, Output: 30 (1+4+9+16)<br><br><strong>Soluci√≥n Iterativa:</strong><br>```javascript<br>function sumOfSquares(n) {<br>    let sum = 0;<br>    for (let i = 1; i <= n; i++) {<br>        sum += i * i;<br>    }<br>    return sum;<br>}<br>```<br><br><strong>Soluci√≥n Matem√°tica:</strong><br>```javascript<br>function sumOfSquares(n) {<br>    return (n * (n + 1) * (2 * n + 1)) / 6;<br>}<br>```<br><br><strong>L√≥gica:</strong> Elevar al cuadrado cada n√∫mero y sumar, o usar la f√≥rmula directa."
      },
      {
        "id": "swap-two-numbers",
        "title": "Swap Two Numbers",
        "type": "logic-problem",
        "content": "<strong>Problema:</strong> Intercambiar los valores de dos variables sin usar una variable temporal.<br><br><strong>Ejemplos:</strong><br>‚Ä¢ Input: a = 5, b = 10<br>‚Ä¢ Output: a = 10, b = 5<br><br><strong>M√©todo 1 - Aritm√©tico:</strong><br>```javascript<br>function swap(a, b) {<br>    a = a + b;<br>    b = a - b;<br>    a = a - b;<br>    return [a, b];<br>}<br>```<br><br><strong>M√©todo 2 - XOR:</strong><br>```javascript<br>function swap(a, b) {<br>    a = a ^ b;<br>    b = a ^ b;<br>    a = a ^ b;<br>    return [a, b];<br>}<br>```<br><br><strong>M√©todo 3 - Destructuring (ES6):</strong><br>```javascript<br>function swap(a, b) {<br>    [a, b] = [b, a];<br>    return [a, b];<br>}<br>```"
      },
      {
        "id": "closest-number",
        "title": "Closest Number",
        "type": "logic-problem",
        "content": "<strong>Problema:</strong> Encontrar el n√∫mero m√°s cercano a un valor dado en un array.<br><br><strong>Ejemplos:</strong><br>‚Ä¢ Input: arr = [1, 3, 8, 10], target = 5<br>‚Ä¢ Output: 3 (diferencia de 2)<br><br><strong>Soluci√≥n:</strong><br>```javascript<br>function closestNumber(arr, target) {<br>    let closest = arr[0];<br>    let minDiff = Math.abs(target - arr[0]);<br>    <br>    for (let i = 1; i < arr.length; i++) {<br>        let diff = Math.abs(target - arr[i]);<br>        if (diff < minDiff) {<br>            minDiff = diff;<br>            closest = arr[i];<br>        }<br>    }<br>    return closest;<br>}<br>```<br><br><strong>L√≥gica:</strong> Comparar la diferencia absoluta entre el target y cada elemento del array."
      },
      {
        "id": "dice-problem",
        "title": "Dice Problem",
        "type": "logic-problem",
        "content": "<strong>Problema:</strong> Simular el lanzamiento de un dado y calcular la probabilidad de obtener un n√∫mero espec√≠fico en n lanzamientos.<br><br><strong>Ejemplos:</strong><br>‚Ä¢ Input: target = 6, throws = 100<br>‚Ä¢ Output: N√∫mero de veces que sali√≥ 6 y su probabilidad<br><br><strong>Soluci√≥n:</strong><br>```javascript<br>function diceSimulation(target, throws) {<br>    let count = 0;<br>    <br>    for (let i = 0; i < throws; i++) {<br>        let roll = Math.floor(Math.random() * 6) + 1;<br>        if (roll === target) {<br>            count++;<br>        }<br>    }<br>    <br>    return {<br>        hits: count,<br>        probability: (count / throws) * 100<br>    };<br>}<br>```<br><br><strong>L√≥gica:</strong> Generar n√∫meros aleatorios del 1-6 y contar coincidencias."
      },
      {
        "id": "nth-term-ap",
        "title": "Nth Term of Arithmetic Progression",
        "type": "logic-problem",
        "content": "<strong>Problema:</strong> Encontrar el en√©simo t√©rmino de una progresi√≥n aritm√©tica.<br><br><strong>F√≥rmula:</strong> an = a1 + (n-1) * d<br>donde a1 = primer t√©rmino, d = diferencia com√∫n<br><br><strong>Ejemplos:</strong><br>‚Ä¢ Input: a1 = 2, d = 3, n = 5<br>‚Ä¢ Output: 14 (2, 5, 8, 11, 14)<br><br><strong>Soluci√≥n:</strong><br>```javascript<br>function nthTermAP(firstTerm, commonDiff, n) {<br>    return firstTerm + (n - 1) * commonDiff;<br>}<br><br>// Generar serie completa<br>function generateAP(firstTerm, commonDiff, terms) {<br>    const series = [];<br>    for (let i = 0; i < terms; i++) {<br>        series.push(firstTerm + i * commonDiff);<br>    }<br>    return series;<br>}<br>```<br><br><strong>L√≥gica:</strong> Aplicar la f√≥rmula matem√°tica de progresi√≥n aritm√©tica."
      }
    ]
  }
}
