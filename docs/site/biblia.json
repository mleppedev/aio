{
  "title": "Biblia Técnica de Entrevista",
  "description": "Compendio organizado de Q&A técnicos y contexto de la oferta",
  "sections": [
    {
      "id": "introduccion",
      "title": "Introducción",
      "level": 2,
      "content": "Las próximas son preguntas típicas de entrevista respondidas de forma acotada desde la perspectiva de un developer senior (.NET / microservicios / Azure / biometría).",
      "type": "text"
    },
    {
      "id": "fundamentos-http-rest",
      "title": "Fundamentos HTTP & REST",
      "level": 2,
      "subsections": [
        {
          "id": "rest-stateless",
          "title": "REST Stateless",
          "level": 3,
          "content": "**Pregunta:** ¿How are REST API stateless?\n**Respuesta:** El servidor no mantiene contexto de cliente; cada petición incluye toda la info necesaria (auth, parámetros, estado derivable) y se procesa de forma independiente.",
          "type": "qa"
        },
        {
          "id": "metodos-http",
          "title": "Métodos HTTP",
          "level": 3,
          "content": [
            "GET (lectura, idempotente, seguro)",
            "POST (crear recurso / operación no idempotente)",
            "PUT (reemplazo total, idempotente)",
            "PATCH (actualización parcial)",
            "DELETE (elimina)",
            "HEAD (solo cabeceras)",
            "OPTIONS (capacidades)"
          ],
          "type": "list"
        },
        {
          "id": "codigos-estado",
          "title": "Códigos de Estado",
          "level": 3,
          "content": [
            "1xx informativo (100 Continue)",
            "2xx éxito (200 OK, 201 Created, 204 No Content)",
            "3xx redirección (301, 302, 304)",
            "4xx error cliente (400, 401, 403, 404)",
            "5xx error servidor (500, 502, 503)"
          ],
          "type": "list"
        },
        {
          "id": "uri-definicion",
          "title": "URI Definición",
          "level": 3,
          "content": "URI identifica un recurso; URL = URI con localización/protocolo (https://api.example.com/users/1); URN = nombre sin localización (urn:isbn:...).",
          "type": "text"
        },
        {
          "id": "buenas-practicas-uris",
          "title": "Buenas Prácticas URIs REST",
          "level": 3,
          "content": [
            "Sustantivos plurales: `/users/123/orders/456`",
            "Jerarquía clara; sin verbos (usa métodos HTTP)",
            "minúsculas + guiones: `/user-profiles`",
            "Versionado: `/api/v1/...`",
            "Filtros / paginación en query: `?role=admin&page=2&limit=50`",
            "Evitar endpoints genéricos tipo `/getData`"
          ],
          "type": "list"
        }
      ]
    },
    {
      "id": "comparativas-arquitectura",
      "title": "Comparativas Arquitectura",
      "level": 2,
      "subsections": [
        {
          "id": "rest-vs-soap",
          "title": "REST vs SOAP",
          "level": 3,
          "content": "REST ligero (JSON común), flexible; SOAP rígido, solo XML, añade WS-* (seguridad, transacciones). SOAP útil en banca/gobierno cuando se exigen contratos estrictos; REST preferido en APIs modernas y microservicios.",
          "type": "text"
        },
        {
          "id": "rest-vs-ajax",
          "title": "REST vs AJAX",
          "level": 3,
          "content": "REST: estilo arquitectónico API.\nAJAX: técnica cliente para peticiones asíncronas sin recargar página.\nSe combinan: AJAX consume endpoints REST.",
          "type": "text"
        },
        {
          "id": "api-vs-microservicio",
          "title": "API vs Microservicio",
          "level": 3,
          "content": "API = contrato/interfaz.\nMicroservicio = unidad desplegable autónoma con lógica y datos.\nRelación: un microservicio suele exponerse mediante una API, pero no toda API implica microservicios.\nCuadro: Definición / Alcance / Despliegue (API no se \"despliega\" por sí misma, microservicio sí) / Relación (API puerta, microservicio la sala detrás).",
          "type": "text"
        }
      ]
    },
    {
      "id": "preguntas-rapidas-general",
      "title": "Preguntas Rápidas Set 1 (General)",
      "level": 2,
      "subsections": [
        {
          "id": "solid-principios",
          "title": "Principios SOLID",
          "level": 3,
          "content": "**Pregunta:** ¿Qué son los principios SOLID?\n**Respuesta:** SRP (Single Responsibility), OCP (Open/Closed), LSP (Liskov Substitution), ISP (Interface Segregation), DIP (Dependency Inversion). Principios fundamentales para diseño de software orientado a objetos mantenible y escalable.",
          "type": "qa"
        },
        {
          "id": "interfaz-vs-clase-abstracta-rapido",
          "title": "Interfaz vs Clase Abstracta",
          "level": 3,
          "content": "**Pregunta:** ¿Diferencia rápida entre interfaz y clase abstracta?\n**Respuesta:** Interfaz = contrato puro sin implementación; Clase abstracta = contrato + lógica base compartida que puede heredarse.",
          "type": "qa"
        },
        {
          "id": "inyeccion-dependencias-concepto",
          "title": "Inyección de Dependencias",
          "level": 3,
          "content": "**Pregunta:** ¿Qué es la inyección de dependencias?\n**Respuesta:** Patrón donde dependencias externas se pasan (constructor/propiedades) en lugar de crearlas internamente, para desacoplar componentes y facilitar testing.",
          "type": "qa"
        },
        {
          "id": "task-vs-thread-diferencia",
          "title": "Task vs Thread",
          "level": 3,
          "content": "**Pregunta:** ¿Diferencia entre Task y Thread?\n**Respuesta:** Task abstrae scheduling sobre ThreadPool (alto nivel); Thread es primitivo del OS (bajo nivel). Task es preferido para operaciones asíncronas.",
          "type": "qa"
        },
        {
          "id": "async-await-concepto",
          "title": "async/await",
          "level": 3,
          "content": "**Pregunta:** ¿Qué es async/await?\n**Respuesta:** Azúcar sintáctico para tareas asíncronas que permite escribir código secuencial sin bloquear hilos de ejecución.",
          "type": "qa"
        },
        {
          "id": "dto-definicion",
          "title": "Data Transfer Object (DTO)",
          "level": 3,
          "content": "**Pregunta:** ¿Qué es un DTO?\n**Respuesta:** Contenedor de datos sin lógica de negocio, usado para transporte de información entre capas o servicios.",
          "type": "qa"
        },
        {
          "id": "record-csharp",
          "title": "Record en C#",
          "level": 3,
          "content": "**Pregunta:** ¿Qué es un Record en C#?\n**Respuesta:** Tipo de referencia con inmutabilidad por defecto y comparación estructural automática, ideal para DTOs y value objects.",
          "type": "qa"
        },
        {
          "id": "middleware-concepto",
          "title": "Middleware",
          "level": 3,
          "content": "**Pregunta:** ¿Qué es un middleware?\n**Respuesta:** Componente en el pipeline HTTP que procesa requests/responses (logging, autenticación, autorización, etc.).",
          "type": "qa"
        },
        {
          "id": "microservicio-definicion",
          "title": "Microservicio",
          "level": 3,
          "content": "**Pregunta:** ¿Qué es un microservicio?\n**Respuesta:** Servicio autónomo con lógica de negocio específica y almacenamiento propio, desplegable independientemente.",
          "type": "qa"
        },
        {
          "id": "blazor-ventajas",
          "title": "Ventajas de Blazor",
          "level": 3,
          "content": "**Pregunta:** ¿Ventaja principal de Blazor?\n**Respuesta:** Permite usar C# en el lado cliente y reutilización de modelos/lógica entre frontend y backend.",
          "type": "qa"
        }
      ]
    },
    {
      "id": "preguntas-rapidas-dotnet-azure",
      "title": "Preguntas Rápidas Set 2 (.NET & Azure)",
      "level": 2,
      "subsections": [
        {
          "id": "dotnet-core-uso",
          "title": ".NET Core Uso",
          "level": 3,
          "content": "**Pregunta:** ¿Por qué usar .NET Core?\n**Respuesta:** Multiplataforma, alto rendimiento, ideal para microservicios, modular y ligero.",
          "type": "qa"
        },
        {
          "id": "framework-vs-core",
          "title": "Framework vs Core",
          "level": 3,
          "content": "**Pregunta:** ¿Diferencia .NET Framework vs .NET Core?\n**Respuesta:** Framework = Windows/monolítico; Core = modular, multiplataforma, contenedores.",
          "type": "qa"
        },
        {
          "id": "controller-definicion",
          "title": "Controller",
          "level": 3,
          "content": "**Pregunta:** ¿Qué es un Controller?\n**Respuesta:** Clase que define endpoints HTTP y maneja requests/responses en ASP.NET.",
          "type": "qa"
        },
        {
          "id": "di-aspnet",
          "title": "DI en ASP.NET",
          "level": 3,
          "content": "**Pregunta:** ¿Qué es DI en ASP.NET?\n**Respuesta:** Contenedor nativo de servicios con scopes (Singleton/Scoped/Transient).",
          "type": "qa"
        },
        {
          "id": "ciclos-vida-di",
          "title": "Ciclos de Vida DI",
          "level": 3,
          "content": "**Pregunta:** ¿Ciclos de vida en DI?\n**Respuesta:** Singleton (toda la app) / Scoped (por request) / Transient (por resolución).",
          "type": "qa"
        },
        {
          "id": "hosted-service",
          "title": "Hosted Service",
          "level": 3,
          "content": "**Pregunta:** ¿Qué es un Hosted Service?\n**Respuesta:** Servicio para trabajos en background que se ejecutan durante la vida de la aplicación.",
          "type": "qa"
        },
        {
          "id": "grpc-vs-rest",
          "title": "gRPC vs REST",
          "level": 3,
          "content": "**Pregunta:** ¿gRPC vs REST?\n**Respuesta:** gRPC: binario, más rápido, contratos estrictos; REST: texto, más flexible, ampliamente adoptado.",
          "type": "qa"
        },
        {
          "id": "azure-app-service",
          "title": "Azure App Service",
          "level": 3,
          "content": "**Pregunta:** ¿Qué es Azure App Service?\n**Respuesta:** PaaS de Microsoft para hospedar aplicaciones web y APIs sin gestionar infraestructura.",
          "type": "qa"
        },
        {
          "id": "azure-functions",
          "title": "Azure Functions",
          "level": 3,
          "content": "**Pregunta:** ¿Qué son Azure Functions?\n**Respuesta:** Computación serverless event-driven que escala automáticamente según demanda.",
          "type": "qa"
        },
        {
          "id": "aks-definicion",
          "title": "Azure Kubernetes Service (AKS)",
          "level": 3,
          "content": "**Pregunta:** ¿Qué es AKS?\n**Respuesta:** Kubernetes gestionado por Azure que simplifica despliegue y administración de contenedores.",
          "type": "qa"
        }
      ]
    },
    {
      "id": "biometrika-preguntas-faciles",
      "title": "Biometrika - Preguntas Fáciles",
      "level": 2,
      "subsections": [
        {
          "id": "csharp-basico-1",
          "title": "Sintaxis Básica C#",
          "level": 3,
          "content": "**Pregunta:** ¿Cuál es la diferencia entre 'var' e 'int' en C#?\n**Respuesta:** 'var' permite inferencia de tipo por el compilador, 'int' es declaración explícita. Ambos son fuertemente tipados en tiempo de compilación.",
          "type": "qa"
        },
        {
          "id": "dotnet-basico-2",
          "title": "¿Qué es un namespace?",
          "level": 3,
          "content": "**Pregunta:** ¿Para qué sirven los namespaces en .NET?\n**Respuesta:** Organizan código en contenedores lógicos, evitan conflictos de nombres y proporcionan estructura jerárquica al proyecto.",
          "type": "qa"
        },
        {
          "id": "fullstack-concepto-3",
          "title": "Desarrollo Fullstack",
          "level": 3,
          "content": "**Pregunta:** ¿Qué significa ser un desarrollador fullstack?\n**Respuesta:** Capacidad de trabajar tanto en frontend (interfaz usuario) como backend (servidor, base de datos, APIs).",
          "type": "qa"
        },
        {
          "id": "api-rest-basico-4",
          "title": "¿Qué es una API REST?",
          "level": 3,
          "content": "**Pregunta:** ¿Qué es una API REST?\n**Respuesta:** Interfaz de programación que sigue principios REST para comunicación entre sistemas usando HTTP y operaciones CRUD.",
          "type": "qa"
        },
        {
          "id": "http-metodos-5",
          "title": "Métodos HTTP Básicos",
          "level": 3,
          "content": "**Pregunta:** ¿Cuáles son los métodos HTTP más comunes?\n**Respuesta:** GET (obtener), POST (crear), PUT (actualizar), DELETE (eliminar), PATCH (actualización parcial).",
          "type": "qa"
        },
        {
          "id": "json-formato-6",
          "title": "Formato JSON",
          "level": 3,
          "content": "**Pregunta:** ¿Qué es JSON y por qué se usa en APIs?\n**Respuesta:** JavaScript Object Notation, formato ligero de intercambio de datos, fácil de leer y parsear por humanos y máquinas.",
          "type": "qa"
        },
        {
          "id": "base-datos-sql-7",
          "title": "Base de Datos SQL",
          "level": 3,
          "content": "**Pregunta:** ¿Qué es una base de datos relacional?\n**Respuesta:** Sistema que organiza datos en tablas relacionadas mediante claves primarias y foráneas, usando SQL para consultas.",
          "type": "qa"
        },
        {
          "id": "crud-operaciones-8",
          "title": "Operaciones CRUD",
          "level": 3,
          "content": "**Pregunta:** ¿Qué significan las operaciones CRUD?\n**Respuesta:** Create (crear), Read (leer), Update (actualizar), Delete (eliminar) - operaciones básicas en bases de datos.",
          "type": "qa"
        },
        {
          "id": "mvc-patron-9",
          "title": "Patrón MVC",
          "level": 3,
          "content": "**Pregunta:** ¿Qué es el patrón MVC?\n**Respuesta:** Model-View-Controller, separa lógica de negocio (Model), presentación (View) y control de flujo (Controller).",
          "type": "qa"
        },
        {
          "id": "version-control-10",
          "title": "Control de Versiones",
          "level": 3,
          "content": "**Pregunta:** ¿Para qué sirve Git?\n**Respuesta:** Sistema de control de versiones distribuido para rastrear cambios en código y colaborar en equipo.",
          "type": "qa"
        },
        {
          "id": "frontend-backend-11",
          "title": "Frontend vs Backend",
          "level": 3,
          "content": "**Pregunta:** ¿Diferencia entre frontend y backend?\n**Respuesta:** Frontend: interfaz usuario (HTML, CSS, JS); Backend: servidor, lógica de negocio, base de datos.",
          "type": "qa"
        },
        {
          "id": "html-css-12",
          "title": "HTML y CSS",
          "level": 3,
          "content": "**Pregunta:** ¿Qué son HTML y CSS?\n**Respuesta:** HTML estructura contenido web, CSS define presentación y estilos visuales.",
          "type": "qa"
        },
        {
          "id": "javascript-basico-13",
          "title": "JavaScript Básico",
          "level": 3,
          "content": "**Pregunta:** ¿Para qué se usa JavaScript?\n**Respuesta:** Lenguaje de programación para interactividad en navegadores y desarrollo backend (Node.js).",
          "type": "qa"
        },
        {
          "id": "debugging-concepto-14",
          "title": "Debugging",
          "level": 3,
          "content": "**Pregunta:** ¿Qué es debugging?\n**Respuesta:** Proceso de encontrar y corregir errores (bugs) en el código fuente.",
          "type": "qa"
        },
        {
          "id": "ide-vs-editor-15",
          "title": "IDE vs Editor",
          "level": 3,
          "content": "**Pregunta:** ¿Diferencia entre IDE y editor de código?\n**Respuesta:** IDE: entorno completo con compilador, debugger, etc. Editor: herramienta ligera para escribir código.",
          "type": "qa"
        },
        {
          "id": "framework-vs-libreria-16",
          "title": "Framework vs Librería",
          "level": 3,
          "content": "**Pregunta:** ¿Diferencia entre framework y librería?\n**Respuesta:** Framework: estructura completa que controla flujo. Librería: conjunto de funciones que llamas cuando necesitas.",
          "type": "qa"
        },
        {
          "id": "responsive-design-17",
          "title": "Diseño Responsive",
          "level": 3,
          "content": "**Pregunta:** ¿Qué es diseño responsive?\n**Respuesta:** Técnica para que sitios web se adapten automáticamente a diferentes tamaños de pantalla.",
          "type": "qa"
        },
        {
          "id": "url-uri-18",
          "title": "URL vs URI",
          "level": 3,
          "content": "**Pregunta:** ¿Diferencia entre URL y URI?\n**Respuesta:** URI identifica recurso, URL especifica ubicación del recurso. Toda URL es URI, pero no toda URI es URL.",
          "type": "qa"
        },
        {
          "id": "cliente-servidor-19",
          "title": "Modelo Cliente-Servidor",
          "level": 3,
          "content": "**Pregunta:** ¿Qué es el modelo cliente-servidor?\n**Respuesta:** Arquitectura donde cliente solicita servicios y servidor los proporciona a través de la red.",
          "type": "qa"
        },
        {
          "id": "protocolo-http-20",
          "title": "Protocolo HTTP",
          "level": 3,
          "content": "**Pregunta:** ¿Qué es el protocolo HTTP?\n**Respuesta:** HyperText Transfer Protocol, protocolo de comunicación para transferir información en la web.",
          "type": "qa"
        },
        {
          "id": "compilacion-interpretacion-21",
          "title": "Compilación vs Interpretación",
          "level": 3,
          "content": "**Pregunta:** ¿Diferencia entre lenguaje compilado e interpretado?\n**Respuesta:** Compilado: código se traduce a máquina antes de ejecutar. Interpretado: código se ejecuta línea por línea.",
          "type": "qa"
        },
        {
          "id": "algoritmo-concepto-22",
          "title": "¿Qué es un Algoritmo?",
          "level": 3,
          "content": "**Pregunta:** ¿Qué es un algoritmo?\n**Respuesta:** Secuencia finita de pasos bien definidos para resolver un problema específico.",
          "type": "qa"
        },
        {
          "id": "estructura-datos-23",
          "title": "Estructuras de Datos",
          "level": 3,
          "content": "**Pregunta:** ¿Qué son las estructuras de datos?\n**Respuesta:** Formas de organizar y almacenar datos para acceso y modificación eficientes (arrays, listas, stacks, etc.).",
          "type": "qa"
        },
        {
          "id": "oop-concepto-24",
          "title": "Programación Orientada a Objetos",
          "level": 3,
          "content": "**Pregunta:** ¿Qué es POO?\n**Respuesta:** Paradigma que organiza código en objetos con propiedades y métodos, basado en herencia, encapsulación, polimorfismo.",
          "type": "qa"
        },
        {
          "id": "clase-objeto-25",
          "title": "Clase vs Objeto",
          "level": 3,
          "content": "**Pregunta:** ¿Diferencia entre clase y objeto?\n**Respuesta:** Clase: plantilla/molde. Objeto: instancia específica creada a partir de una clase.",
          "type": "qa"
        },
        {
          "id": "herencia-concepto-26",
          "title": "Herencia",
          "level": 3,
          "content": "**Pregunta:** ¿Qué es herencia en POO?\n**Respuesta:** Mecanismo donde una clase deriva propiedades y métodos de otra clase padre.",
          "type": "qa"
        },
        {
          "id": "encapsulacion-concepto-27",
          "title": "Encapsulación",
          "level": 3,
          "content": "**Pregunta:** ¿Qué es encapsulación?\n**Respuesta:** Principio de ocultar detalles internos de implementación y exponer solo interfaz pública.",
          "type": "qa"
        },
        {
          "id": "polimorfismo-concepto-28",
          "title": "Polimorfismo",
          "level": 3,
          "content": "**Pregunta:** ¿Qué es polimorfismo?\n**Respuesta:** Capacidad de objetos de diferentes clases de responder al mismo mensaje de manera específica a su tipo.",
          "type": "qa"
        },
        {
          "id": "abstraccion-concepto-29",
          "title": "Abstracción",
          "level": 3,
          "content": "**Pregunta:** ¿Qué es abstracción en programación?\n**Respuesta:** Proceso de ocultar complejidad implementation y mostrar solo funcionalidad esencial al usuario.",
          "type": "qa"
        },
        {
          "id": "variable-constante-30",
          "title": "Variable vs Constante",
          "level": 3,
          "content": "**Pregunta:** ¿Diferencia entre variable y constante?\n**Respuesta:** Variable: valor puede cambiar durante ejecución. Constante: valor fijo que no cambia.",
          "type": "qa"
        },
        {
          "id": "array-lista-31",
          "title": "Array vs Lista",
          "level": 3,
          "content": "**Pregunta:** ¿Diferencia entre array y lista?\n**Respuesta:** Array: tamaño fijo, acceso directo por índice. Lista: tamaño dinámico, métodos para agregar/remover.",
          "type": "qa"
        },
        {
          "id": "loop-concepto-32",
          "title": "Bucles/Loops",
          "level": 3,
          "content": "**Pregunta:** ¿Qué son los bucles en programación?\n**Respuesta:** Estructuras de control que repiten bloque de código mientras se cumple una condición.",
          "type": "qa"
        },
        {
          "id": "condicionales-33",
          "title": "Estructuras Condicionales",
          "level": 3,
          "content": "**Pregunta:** ¿Qué son las estructuras condicionales?\n**Respuesta:** Permiten ejecutar diferentes bloques de código según se cumplan condiciones (if, else, switch).",
          "type": "qa"
        },
        {
          "id": "funcion-metodo-34",
          "title": "Función vs Método",
          "level": 3,
          "content": "**Pregunta:** ¿Diferencia entre función y método?\n**Respuesta:** Función: código independiente. Método: función asociada a una clase u objeto específico.",
          "type": "qa"
        },
        {
          "id": "parametro-argumento-35",
          "title": "Parámetro vs Argumento",
          "level": 3,
          "content": "**Pregunta:** ¿Diferencia entre parámetro y argumento?\n**Respuesta:** Parámetro: variable en definición de función. Argumento: valor real pasado al llamar función.",
          "type": "qa"
        },
        {
          "id": "scope-ambito-36",
          "title": "Scope/Ámbito",
          "level": 3,
          "content": "**Pregunta:** ¿Qué es el scope de una variable?\n**Respuesta:** Región del código donde la variable es accesible (global, local, de bloque).",
          "type": "qa"
        },
        {
          "id": "comentarios-codigo-37",
          "title": "Comentarios en Código",
          "level": 3,
          "content": "**Pregunta:** ¿Para qué sirven los comentarios?\n**Respuesta:** Documentar código para explicar funcionalidad, no se ejecutan, mejoran legibilidad y mantenimiento.",
          "type": "qa"
        },
        {
          "id": "testing-basico-38",
          "title": "Testing Básico",
          "level": 3,
          "content": "**Pregunta:** ¿Qué es testing en desarrollo?\n**Respuesta:** Proceso de verificar que el software funciona correctamente mediante pruebas automatizadas o manuales.",
          "type": "qa"
        },
        {
          "id": "bug-error-39",
          "title": "Bug/Error",
          "level": 3,
          "content": "**Pregunta:** ¿Qué es un bug?\n**Respuesta:** Error o defecto en el software que causa comportamiento inesperado o incorrecto.",
          "type": "qa"
        },
        {
          "id": "deployment-concepto-40",
          "title": "Deployment",
          "level": 3,
          "content": "**Pregunta:** ¿Qué es deployment?\n**Respuesta:** Proceso de poner aplicación en producción para que usuarios finales puedan acceder y usarla.",
          "type": "qa"
        }
      ]
    },
    {
      "id": "dotnet-basico",
      "title": ".NET - Preguntas Básicas",
      "level": 2,
      "subsections": [
        {
          "id": "dotnet-framework-basico",
          "title": "¿Qué es .NET Framework?",
          "level": 3,
          "content": "**Pregunta:** ¿Qué es .NET Framework?\n**Respuesta:** Plataforma integral de desarrollo desarrollada por Microsoft. Incluye Common Language Runtime (CLR) y bibliotecas de clases. Compatible con múltiples lenguajes (C#, VB.NET, F#) y ofrece gestión de memoria, seguridad y manejo de excepciones. Framework para Windows, pero .NET Core/.NET 5+ son multiplataforma.",
          "type": "qa"
        },
        {
          "id": "clr-basico",
          "title": "¿Qué es Common Language Runtime (CLR)?",
          "level": 3,
          "content": "**Pregunta:** ¿Qué es Common Language Runtime (CLR)?\n**Respuesta:** Entorno de ejecución de .NET Framework. Gestiona ejecución de aplicaciones .NET, proporciona administración de memoria, verificación de código, seguridad, recolección de basura y manejo de excepciones. Incluye compilador Just-In-Time (JIT) que convierte código IL a código máquina nativo en tiempo de ejecución.",
          "type": "qa"
        },
        {
          "id": "tipos-valor-referencia",
          "title": "Tipos de Valor vs Tipos de Referencia",
          "level": 3,
          "content": "**Pregunta:** Explique la diferencia entre tipos de valor y tipos de referencia en .NET.\n**Respuesta:** **Tipos de valor:** Contienen directamente sus datos, se almacenan en la pila. Incluyen int, bool, float, double, char, decimal, enum, struct. Al asignar se crea una copia. **Tipos de referencia:** Almacenan referencia a los datos en el montón. Incluyen class, interface, delegate, string, array. Al asignar se copia la referencia, no los datos.",
          "type": "qa"
        },
        {
          "id": "system-io",
          "title": "Espacio de nombres System.IO",
          "level": 3,
          "content": "**Pregunta:** ¿Cuál es el propósito del espacio de nombres System.IO?\n**Respuesta:** Proporciona clases para operaciones de entrada/salida (E/S). Incluye lectura/escritura de archivos, flujos de datos y comunicación con dispositivos. Clases clave: File, Directory, FileStream, StreamReader/Writer, BinaryReader/Writer.",
          "type": "qa"
        },
        {
          "id": "atributos-metadatos",
          "title": "Atributos y Metadatos",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo facilitan los atributos los metadatos en .NET?\n**Respuesta:** Los atributos permiten añadir metadatos descriptivos a elementos del código (clases, métodos, propiedades). Se accede en tiempo de ejecución mediante reflexión. Se colocan entre corchetes []. Ejemplos: [Serializable], [Obsolete]. Permiten programación declarativa y comportamiento dinámico.",
          "type": "qa"
        },
        {
          "id": "configurationmanager",
          "title": "ConfigurationManager",
          "level": 3,
          "content": "**Pregunta:** Explique la función de ConfigurationManager en la gestión de configuración.\n**Respuesta:** Clase del espacio System.Configuration para leer configuración de App.config/Web.config. Lee pares clave-valor en formato XML. Los datos se almacenan en caché para eficiencia. Solo lectura para configuración estándar. En .NET Core+ se reemplaza por Microsoft.Extensions.Configuration.",
          "type": "qa"
        },
        {
          "id": "exe-vs-dll",
          "title": "Diferencia entre EXE y DLL",
          "level": 3,
          "content": "**Pregunta:** ¿Cuál es la diferencia entre un archivo exe y dll en .NET?\n**Respuesta:** **EXE:** Contiene punto de entrada de aplicación, diseñado para ejecutarse directamente. Es un programa independiente. **DLL:** Biblioteca de enlace dinámico con código reutilizable, referenciado por múltiples aplicaciones. Permite compartir código y desarrollo modular. CLR carga DLLs según necesidad.",
          "type": "qa"
        },
        {
          "id": "system-reflection",
          "title": "System.Reflection",
          "level": 3,
          "content": "**Pregunta:** ¿Cuál es el propósito del espacio de nombres System.Reflection?\n**Respuesta:** Proporciona clases para inspeccionar y manipular metadatos, tipos y ensamblados en tiempo de ejecución. Permite cargar ensamblados dinámicamente, crear instancias, invocar métodos. Usado en arquitecturas de plugins, serialización, análisis de tipos. Debe usarse con cuidado por seguridad.",
          "type": "qa"
        },
        {
          "id": "serializacion",
          "title": "Serialización y Deserialización",
          "level": 3,
          "content": "**Pregunta:** Explique serialización y deserialización en .NET.\n**Respuesta:** **Serialización:** Proceso de convertir objeto en flujo de bytes para almacenamiento/transmisión. **Deserialización:** Proceso inverso de reconstruir objeto desde bytes serializados. Permite persistencia, transferencia por red y compartir entre aplicaciones.",
          "type": "qa"
        },
        {
          "id": "manejo-excepciones",
          "title": "Manejo de Excepciones",
          "level": 3,
          "content": "**Pregunta:** ¿Cuáles son los tipos de excepciones en .NET y cómo se manejan?\n**Respuesta:** Todas derivan de System.Exception. Comunes: ApplicationException, NullReferenceException, IndexOutOfRangeException, DivideByZeroException. Se manejan con bloques try-catch-finally: **try** (código que puede fallar), **catch** (manejo de excepciones específicas), **finally** (código que siempre se ejecuta).",
          "type": "qa"
        },
        {
          "id": "ensamblados",
          "title": "Ensamblados en .NET",
          "level": 3,
          "content": "**Pregunta:** ¿Qué son los ensamblados en .NET?\n**Respuesta:** Componentes básicos de aplicaciones .NET. Unidades autónomas con código compilado, metadatos y recursos. Contienen manifiesto con información del ensamblado. Tipos: **Estáticos** (.exe/.dll en disco) y **Dinámicos** (ejecutan desde memoria). Pueden ser privados (una app) o compartidos (múltiples apps).",
          "type": "qa"
        },
        {
          "id": "gac",
          "title": "Global Assembly Cache (GAC)",
          "level": 3,
          "content": "**Pregunta:** ¿Qué es la Global Assembly Cache (GAC)?\n**Respuesta:** Repositorio central en .NET Framework para ensamblados compartidos. Permite almacenar y compartir ensamblados globalmente. Requiere nombre seguro (versión + clave pública). Garantiza control de versiones y evita múltiples copias. Eliminado en .NET Core para permitir instalaciones paralelas.",
          "type": "qa"
        },
        {
          "id": "globalizacion-localizacion",
          "title": "Globalización y Localización",
          "level": 3,
          "content": "**Pregunta:** ¿Cuál es el papel de globalización y localización en .NET?\n**Respuesta:** **Globalización:** Diseño de aplicaciones que se adaptan a diferentes culturas/idiomas/regiones. **Localización:** Adaptación a cultura específica. .NET soporta mediante archivos de recursos, ensambles satélite y clase CultureInfo para contenido localizado y diferencias culturales.",
          "type": "qa"
        },
        {
          "id": "cts",
          "title": "Common Type System (CTS)",
          "level": 3,
          "content": "**Pregunta:** ¿Qué es el Common Type System (CTS)?\n**Respuesta:** Conjunto de reglas que garantizan interoperabilidad entre lenguajes .NET. Define tipos comunes, comportamiento y representación en memoria. Clasifica en: **Tipos de valor** (datos directos, copia propia) y **Tipos de referencia** (referencia a ubicación en memoria). Permite uso de objetos entre lenguajes sin problemas.",
          "type": "qa"
        },
        {
          "id": "garbage-collection",
          "title": "Recolección de Basura",
          "level": 3,
          "content": "**Pregunta:** Explique la recolección de basura en .NET.\n**Respuesta:** Gestión automática de memoria. Libera memoria de objetos sin referencia. Usa enfoque generacional: **Gen 0** (objetos corta duración), **Gen 1** (buffer entre corta/larga duración), **Gen 2** (objetos larga duración). Desarrolladores deben gestionar recursos no-memoria (archivos, DB) eficientemente.",
          "type": "qa"
        },
        {
          "id": "tecnologias-acceso-datos",
          "title": "Tecnologías de Acceso a Datos",
          "level": 3,
          "content": "**Pregunta:** ¿Cuáles son las tecnologías de acceso a datos en .NET?\n**Respuesta:** **ADO.NET:** Clases para bases de datos relacionales, modelo orientado a conexión. **Entity Framework:** ORM que permite trabajar con datos como objetos, mapeo automático a SQL. **LINQ to SQL:** Consultar/manipular SQL Server como objetos .NET tipados. EF Core es versión ligera, extensible y multiplataforma.",
          "type": "qa"
        }
      ]
    },
    {
      "id": "dotnet-intermedio",
      "title": ".NET - Preguntas Intermedias",
      "level": 2,
      "subsections": [
        {
          "id": "interfaz-vs-clase-abstracta",
          "title": "Interfaz vs Clase Abstracta",
          "level": 3,
          "content": "**Pregunta:** ¿Cuál es la diferencia entre interfaz y clase abstracta en .NET?\n**Respuesta:** **Interfaz:** Define contrato (métodos, propiedades, eventos) que clase debe implementar. Permite herencia múltiple, miembros implícitamente públicos. **Clase abstracta:** No se puede instanciar, sirve como base. Puede contener miembros abstractos y no abstractos, proporciona implementaciones predeterminadas. Útil para comportamiento común entre clases derivadas.",
          "type": "qa"
        },
        {
          "id": "cil-lenguaje-intermedio",
          "title": "Common Intermediate Language (CIL)",
          "level": 3,
          "content": "**Pregunta:** ¿Cuál es el papel del Common Intermediate Language (CIL)?\n**Respuesta:** Lenguaje intermedio independiente de plataforma. Código fuente .NET se compila primero a CIL (antes MSIL), no directamente a código máquina. Permite ejecución multiplataforma. CLR toma CIL y lo compila a código máquina mediante JIT. Es lenguaje de bajo nivel, legible por humanos, más cercano al código máquina.",
          "type": "qa"
        },
        {
          "id": "jit-compilation",
          "title": "Compilación Just-In-Time (JIT)",
          "level": 3,
          "content": "**Pregunta:** Define la compilación Just-In-Time (JIT) en .NET.\n**Respuesta:** Proceso donde CLR compila código CIL a código máquina en tiempo de ejecución, justo antes de la ejecución. Optimiza rendimiento traduciendo CIL a instrucciones que el hardware puede ejecutar directamente. Ocurre dinámicamente según se necesite el código.",
          "type": "qa"
        },
        {
          "id": "system-collections",
          "title": "System.Collections",
          "level": 3,
          "content": "**Pregunta:** ¿Cuáles son los tipos de colecciones en System.Collections?\n**Respuesta:** Proporciona varios tipos: ArrayList, HashTable, SortedList, Stack, Queue. Estas colecciones ofrecen diferentes formas de almacenar y acceder datos. Cada una optimizada para diferentes patrones de acceso y uso.",
          "type": "qa"
        },
        {
          "id": "system-diagnostics",
          "title": "System.Diagnostics",
          "level": 3,
          "content": "**Pregunta:** ¿Cuál es el propósito de System.Diagnostics?\n**Respuesta:** Proporciona clases para interactuar con procesos del sistema, eventos, contadores de rendimiento y depuración. Clases clave: **Process** (iniciar/detener procesos), **EventLog** (leer/escribir eventos), **PerformanceCounter** (medir rendimiento), **Debug/Trace** (depuración), **Stopwatch** (medir tiempo).",
          "type": "qa"
        },
        {
          "id": "delegados-eventos",
          "title": "Delegados y Eventos",
          "level": 3,
          "content": "**Pregunta:** Explique delegados y eventos en .NET.\n**Respuesta:** **Delegados:** Tipos de referencia que contienen referencias a métodos con firma específica. Permiten tratar métodos como entidades asignables. **Eventos:** Construcción sobre delegados que permite notificar cambios. Clase que envía = publisher, clase que recibe = subscriber. Fundamental en programación basada en eventos.",
          "type": "qa"
        },
        {
          "id": "system-threading",
          "title": "System.Threading",
          "level": 3,
          "content": "**Pregunta:** ¿Cuál es la función de System.Threading en multithreading?\n**Respuesta:** Proporciona clases para crear y administrar aplicaciones multihilo. Tipos: Thread, ThreadPool, Mutex, Monitor, Semaphore. Permite controlar ejecución de hilos, sincronizar acceso a recursos compartidos y coordinar comunicación entre hilos.",
          "type": "qa"
        },
        {
          "id": "using-statement",
          "title": "Sentencia using",
          "level": 3,
          "content": "**Pregunta:** ¿Cuál es el propósito de la sentencia using en C#?\n**Respuesta:** Elimina automáticamente recursos no administrados que implementan IDisposable. Garantiza que se llame Dispose() al salir del bloque, incluso con excepciones. Simplifica gestión de recursos como conexiones DB, streams, sockets. Previene fugas de recursos con sintaxis conveniente.",
          "type": "qa"
        },
        {
          "id": "boxing-unboxing",
          "title": "Boxing y Unboxing",
          "level": 3,
          "content": "**Pregunta:** Explique boxing y unboxing en .NET.\n**Respuesta:** **Boxing:** Convertir tipo de valor a su representación de referencia en el montón (int → object). **Unboxing:** Extraer tipo de valor del objeto boxeado. Boxing necesario cuando tipo de valor debe tratarse como object. Unboxing permite recuperar valor para operaciones específicas.",
          "type": "qa"
        },
        {
          "id": "metodos-extension",
          "title": "Métodos de Extensión",
          "level": 3,
          "content": "**Pregunta:** ¿Qué son los métodos de extensión en C#?\n**Respuesta:** Permiten añadir nuevos métodos a tipos existentes sin modificar código fuente. Se definen como métodos estáticos en clase estática. Primer parámetro especifica tipo extendido, precedido por 'this'. Facilitan extensión de clases de terceros o frameworks sin herencia.",
          "type": "qa"
        },
        {
          "id": "system-net-sockets",
          "title": "System.Net.Sockets",
          "level": 3,
          "content": "**Pregunta:** ¿Cuál es el propósito de System.Net.Sockets en redes?\n**Respuesta:** Proporciona clases para programación de redes, especialmente aplicaciones cliente-servidor con TCP/IP o UDP. Incluye TcpClient, TcpListener, UdpClient, Socket. Permite establecer conexiones de red, enviar/recibir datos y gestionar operaciones de red.",
          "type": "qa"
        },
        {
          "id": "inversion-control",
          "title": "Inversión de Control (IoC)",
          "level": 3,
          "content": "**Pregunta:** Explique Inversión de Control (IoC) y cómo se logra en .NET.\n**Respuesta:** Principio de diseño que promueve acoplamiento flexible invirtiendo flujo de control tradicional. En lugar de objetos crear dependencias, contenedor/framework las gestiona. En .NET se logra mediante contenedores de Inyección de Dependencias donde el contenedor inyecta dependencias, permitiendo configuración flexible y facilitando pruebas.",
          "type": "qa"
        },
        {
          "id": "string-vs-stringbuilder",
          "title": "String vs StringBuilder",
          "level": 3,
          "content": "**Pregunta:** ¿Cuál es la diferencia entre string y StringBuilder?\n**Respuesta:** **String:** Inmutable, al modificar se crea nuevo objeto en memoria. Ineficiente para muchas manipulaciones. **StringBuilder:** Mutable, cambios se aplican al objeto existente sin crear nuevo. Más eficiente para manipulaciones extensivas de cadenas. StringBuilder recomendado para concatenaciones múltiples.",
          "type": "qa"
        },
        {
          "id": "sobrecarga-operadores",
          "title": "Sobrecarga de Operadores",
          "level": 3,
          "content": "**Pregunta:** Explique sobrecarga de operadores en C#.\n**Respuesta:** Permite definir y personalizar comportamiento de operadores para tipos definidos por usuario. Permite redefinir operadores como +, -, *, /, ==, != para tipos personalizados. Ejemplo: sobrecargar + en clase Vector para suma de vectores, permitiendo vector1 + vector2 con semántica personalizada.",
          "type": "qa"
        }
      ]
    },
    {
      "id": "biometrika-preguntas-intermedias",
      "title": "Biometrika - Preguntas Intermedias",
      "level": 2,
      "subsections": [
        {
          "id": "microservicios-arquitectura-1",
          "title": "Arquitectura de Microservicios",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo diseñarías una arquitectura de microservicios para un sistema de verificación de identidad?\n**Respuesta:** Servicios separados para: autenticación, verificación biométrica, gestión de usuarios, auditoría. Comunicación vía APIs REST/gRPC, event-driven con message brokers, base de datos por servicio.",
          "type": "qa"
        },
        {
          "id": "ci-cd-implementacion-2",
          "title": "Implementación CI/CD",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo implementarías CI/CD para una aplicación .NET Core?\n**Respuesta:** Pipeline automatizado: Git webhook → build automatizado → tests unitarios/integración → deployment a staging → tests E2E → deployment a producción. Uso de Azure DevOps/GitHub Actions.",
          "type": "qa"
        },
        {
          "id": "blazor-ssr-spa-3",
          "title": "Blazor Server vs WebAssembly",
          "level": 3,
          "content": "**Pregunta:** ¿Cuándo usar Blazor Server vs Blazor WebAssembly?\n**Respuesta:** Server: conexión estable, datos sensibles, menor payload inicial. WebAssembly: offline, mejor UX, mayor payload inicial, ideal para PWAs.",
          "type": "qa"
        },
        {
          "id": "entity-framework-optimizacion-4",
          "title": "Optimización Entity Framework",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo optimizas consultas en Entity Framework Core?\n**Respuesta:** Include() para eager loading, Select() para proyecciones, AsNoTracking() para read-only, SplitQuery() para múltiples includes, índices en BD, consultas raw cuando necesario.",
          "type": "qa"
        },
        {
          "id": "api-versionado-5",
          "title": "Versionado de APIs",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo manejas el versionado de APIs REST?\n**Respuesta:** URL versioning (/api/v1/), header versioning (Accept-Version), query parameter (?version=1). Mantener backward compatibility, deprecación gradual, documentación clara.",
          "type": "qa"
        },
        {
          "id": "autenticacion-jwt-6",
          "title": "Autenticación JWT",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo implementas autenticación JWT en ASP.NET Core?\n**Respuesta:** AddAuthentication().AddJwtBearer(), configurar TokenValidationParameters, middleware de autenticación, [Authorize] en controllers, refresh token para renovación.",
          "type": "qa"
        },
        {
          "id": "caching-estrategias-7",
          "title": "Estrategias de Caché",
          "level": 3,
          "content": "**Pregunta:** ¿Qué estrategias de caché usarías en una aplicación .NET?\n**Respuesta:** Memory cache para datos frecuentes, Redis para distribuido, response caching para HTTP, database query caching. Patrones: Cache-Aside, Write-Through, Write-Behind.",
          "type": "qa"
        },
        {
          "id": "async-programming-8",
          "title": "Programación Asíncrona",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo evitas deadlocks en código async/await?\n**Respuesta:** No usar .Result o .Wait(), ConfigureAwait(false) en bibliotecas, no bloquear contexto de sincronización, usar Task.Run para CPU-bound work.",
          "type": "qa"
        },
        {
          "id": "dependency-injection-scopes-9",
          "title": "Scopes en Dependency Injection",
          "level": 3,
          "content": "**Pregunta:** ¿Cuándo usar Singleton, Scoped y Transient en DI?\n**Respuesta:** Singleton: servicios stateless/caros (logging). Scoped: por request (DbContext). Transient: servicios ligeros/stateless que cambian frecuentemente.",
          "type": "qa"
        },
        {
          "id": "exception-handling-10",
          "title": "Manejo Global de Excepciones",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo implementas manejo global de excepciones en ASP.NET Core?\n**Respuesta:** Middleware personalizado, IExceptionHandler, UseExceptionHandler(), logging estructurado, respuestas consistentes, ocultación de detalles en producción.",
          "type": "qa"
        },
        {
          "id": "testing-strategies-11",
          "title": "Estrategias de Testing",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo estructuras tests en una aplicación .NET?\n**Respuesta:** Unit tests (xUnit), Integration tests (TestServer), mocking (Moq), test databases (InMemory/TestContainers), AAA pattern (Arrange-Act-Assert).",
          "type": "qa"
        },
        {
          "id": "performance-monitoring-12",
          "title": "Monitoreo de Performance",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo monitoreas performance en aplicaciones .NET?\n**Respuesta:** Application Insights, custom metrics, health checks, logging estructurado, profiling (dotTrace), monitoring de memoria/CPU, alertas automáticas.",
          "type": "qa"
        },
        {
          "id": "database-migrations-13",
          "title": "Migraciones de Base de Datos",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo manejas migraciones en Entity Framework?\n**Respuesta:** Add-Migration, Update-Database, Script-Migration para producción, backup antes de migrar, rollback procedures, validación en staging primero.",
          "type": "qa"
        },
        {
          "id": "security-best-practices-14",
          "title": "Mejores Prácticas de Seguridad",
          "level": 3,
          "content": "**Pregunta:** ¿Qué prácticas de seguridad implementas en APIs .NET?\n**Respuesta:** HTTPS obligatorio, validación de input, sanitización, rate limiting, CORS configurado, SQL injection prevention, authentication/authorization, secrets management.",
          "type": "qa"
        },
        {
          "id": "logging-structured-15",
          "title": "Logging Estructurado",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo implementas logging estructurado en .NET?\n**Respuesta:** Serilog con structured logging, log levels apropiados, correlation IDs, log aggregation (ELK/Azure Monitor), performance logging, sensitive data filtering.",
          "type": "qa"
        },
        {
          "id": "design-patterns-16",
          "title": "Patrones de Diseño",
          "level": 3,
          "content": "**Pregunta:** ¿Qué patrones de diseño usas frecuentemente en .NET?\n**Respuesta:** Repository/UoW para datos, Factory para creación, Strategy para algoritmos, Observer para eventos, Decorator para funcionalidad adicional, CQRS para lectura/escritura.",
          "type": "qa"
        },
        {
          "id": "azure-services-integration-17",
          "title": "Integración con Servicios Azure",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo integras servicios Azure en aplicaciones .NET?\n**Respuesta:** Azure SDK para .NET, managed identity para autenticación, Key Vault para secretos, Service Bus para messaging, Blob Storage para archivos, configuration providers.",
          "type": "qa"
        },
        {
          "id": "docker-containerization-18",
          "title": "Containerización con Docker",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo containerizas una aplicación .NET?\n**Respuesta:** Multi-stage Dockerfile, base images oficiales, optimización de layers, health checks, environment variables, docker-compose para desarrollo, registry para distribución.",
          "type": "qa"
        },
        {
          "id": "message-queuing-19",
          "title": "Message Queuing",
          "level": 3,
          "content": "**Pregunta:** ¿Cuándo y cómo usas message queues?\n**Respuesta:** Para desacoplar servicios, processing asíncrono, reliability. Azure Service Bus, RabbitMQ, implementar retry policies, dead letter queues, idempotencia.",
          "type": "qa"
        },
        {
          "id": "background-services-20",
          "title": "Background Services",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo implementas background services en .NET?\n**Respuesta:** BackgroundService class, hosted services, timer-based execution, cancellation tokens, graceful shutdown, monitoring de health, Azure Functions para serverless.",
          "type": "qa"
        },
        {
          "id": "api-documentation-21",
          "title": "Documentación de APIs",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo documentas APIs en ASP.NET Core?\n**Respuesta:** Swagger/OpenAPI, XML comments, Swashbuckle, ejemplos de request/response, versionado en documentación, testing playground integrado.",
          "type": "qa"
        },
        {
          "id": "configuration-management-22",
          "title": "Gestión de Configuración",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo manejas configuración en aplicaciones .NET?\n**Respuesta:** appsettings.json por environment, Azure App Configuration, Key Vault para secretos, environment variables, options pattern, configuration validation.",
          "type": "qa"
        },
        {
          "id": "data-validation-23",
          "title": "Validación de Datos",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo implementas validación en APIs .NET?\n**Respuesta:** Data Annotations, FluentValidation, model binding validation, custom validators, client-side validation, error messages localizados.",
          "type": "qa"
        },
        {
          "id": "memory-management-24",
          "title": "Gestión de Memoria",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo optimizas el uso de memoria en .NET?\n**Respuesta:** Dispose pattern, using statements, avoiding memory leaks, object pooling, Span<T> para high-performance, profiling regular, GC tuning cuando necesario.",
          "type": "qa"
        },
        {
          "id": "real-time-communication-25",
          "title": "Comunicación en Tiempo Real",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo implementas comunicación real-time en .NET?\n**Respuesta:** SignalR para WebSockets, hubs para grupos, scaling con Redis backplane, authentication en connections, graceful reconnection.",
          "type": "qa"
        },
        {
          "id": "file-upload-handling-26",
          "title": "Manejo de Archivos",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo manejas upload de archivos grandes en ASP.NET?\n**Respuesta:** Streaming upload, IFormFile para pequeños, MultipartReader para grandes, validación de tipos, virus scanning, storage en blob, progress tracking.",
          "type": "qa"
        },
        {
          "id": "cross-cutting-concerns-27",
          "title": "Cross-Cutting Concerns",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo manejas cross-cutting concerns en .NET?\n**Respuesta:** Middleware para ASP.NET, ActionFilters, interceptors, AOP con Castle DynamicProxy, decorators, pipeline behaviors en MediatR.",
          "type": "qa"
        },
        {
          "id": "database-connection-pooling-28",
          "title": "Connection Pooling",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo optimizas conexiones a base de datos?\n**Respuesta:** DbContext lifecycle management, connection string tuning, connection pooling configuration, using statements, dispose properly, monitoring connections.",
          "type": "qa"
        },
        {
          "id": "event-driven-architecture-29",
          "title": "Arquitectura Event-Driven",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo implementas event-driven architecture en .NET?\n**Respuesta:** Domain events, event sourcing, CQRS, event store, eventual consistency, saga pattern para long-running processes, event replay.",
          "type": "qa"
        },
        {
          "id": "api-rate-limiting-30",
          "title": "Rate Limiting",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo implementas rate limiting en APIs?\n**Respuesta:** AspNetCoreRateLimit, sliding window, fixed window, per-client limits, headers informativos, graceful degradation, distributed rate limiting con Redis.",
          "type": "qa"
        },
        {
          "id": "health-checks-implementation-31",
          "title": "Health Checks",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo implementas health checks comprehensivos?\n**Respuesta:** AddHealthChecks, database connectivity, external services, custom checks, UI dashboard, different endpoints para readiness/liveness, degraded states.",
          "type": "qa"
        },
        {
          "id": "localization-globalization-32",
          "title": "Localización e Internacionalización",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo implementas i18n en aplicaciones .NET?\n**Respuesta:** IStringLocalizer, resource files, culture providers, number/date formatting, RTL support, pluralization rules, localized validation messages.",
          "type": "qa"
        },
        {
          "id": "custom-middleware-33",
          "title": "Middleware Personalizado",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo creates middleware personalizado en ASP.NET Core?\n**Respuesta:** Implementar InvokeAsync, dependency injection, order matters, conditional middleware, factory pattern, testing middleware, performance considerations.",
          "type": "qa"
        },
        {
          "id": "grpc-implementation-34",
          "title": "Implementación gRPC",
          "level": 3,
          "content": "**Pregunta:** ¿Cuándo y cómo usas gRPC en lugar de REST?\n**Respuesta:** Para comunicación interna microservicios, alta performance, contratos tipados. Protocol buffers, streaming, interceptors, health checking, load balancing.",
          "type": "qa"
        },
        {
          "id": "distributed-tracing-35",
          "title": "Distributed Tracing",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo implementas distributed tracing?\n**Respuesta:** OpenTelemetry, correlation IDs, trace context propagation, custom spans, integration con Application Insights/Jaeger, performance impact minimal.",
          "type": "qa"
        },
        {
          "id": "secrets-management-36",
          "title": "Gestión de Secretos",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo manejas secretos en aplicaciones .NET?\n**Respuesta:** Azure Key Vault, user secrets en desarrollo, environment variables, managed identity, rotation automática, auditing de acceso, never hardcode.",
          "type": "qa"
        },
        {
          "id": "circuit-breaker-implementation-37",
          "title": "Circuit Breaker Pattern",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo implementas circuit breaker pattern?\n**Respuesta:** Polly library, failure thresholds, timeout policies, fallback mechanisms, metrics collection, dashboard monitoring, testing failure scenarios.",
          "type": "qa"
        },
        {
          "id": "data-synchronization-38",
          "title": "Sincronización de Datos",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo sincronizas datos entre microservicios?\n**Respuesta:** Event-driven sync, eventual consistency, saga pattern, distributed transactions (2PC cuando necesario), conflict resolution, data versioning.",
          "type": "qa"
        },
        {
          "id": "api-gateway-pattern-39",
          "title": "API Gateway Pattern",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo implementas un API Gateway?\n**Respuesta:** Azure API Management, Ocelot, routing rules, authentication/authorization, rate limiting, request/response transformation, monitoring centralizado.",
          "type": "qa"
        },
        {
          "id": "blazor-component-lifecycle-40",
          "title": "Ciclo de Vida Componentes Blazor",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo manejas el ciclo de vida en componentes Blazor?\n**Respuesta:** OnInitialized, OnParametersSet, OnAfterRender, IDisposable, StateHasChanged, event handlers cleanup, memory leak prevention.",
          "type": "qa"
        }
      ]
    },
    {
      "id": "dotnet-avanzado",
      "title": ".NET - Preguntas Avanzadas",
      "level": 2,
      "subsections": [
        {
          "id": "roslyn-platform",
          "title": "Plataforma Roslyn",
          "level": 3,
          "content": "**Pregunta:** ¿Cuál es el papel de la plataforma Roslyn en .NET?\n**Respuesta:** Plataforma de compiladores .NET de código abierto para C# y VB.NET. Proporciona compiladores y APIs de análisis de código. Permite crear herramientas de análisis personalizadas, análisis estático y refactorización. Expone estructura completa del código (árboles sintácticos, símbolos, información semántica). Usado por Visual Studio para IntelliSense, refactorización y correcciones.",
          "type": "qa"
        },
        {
          "id": "modelo-actor",
          "title": "Modelo Actor",
          "level": 3,
          "content": "**Pregunta:** Explique el concepto del modelo Actor.\n**Respuesta:** Modelo computacional para operaciones concurrentes donde actores son unidades fundamentales. Al recibir mensaje, actor puede: tomar decisiones, crear otros actores, enviar mensajes, decidir reacción a siguiente mensaje. Cada actor tiene estado privado, comunica solo por mensajes asincrónicos. Elimina necesidad de bloqueos. En .NET: Akka.NET implementa este modelo.",
          "type": "qa"
        },
        {
          "id": "dotnet-6-caracteristicas",
          "title": "Características .NET 6.0",
          "level": 3,
          "content": "**Pregunta:** ¿Cuáles son las características principales de .NET 6.0?\n**Respuesta:** Rendimiento mejorado, soporte multiplataforma mejorado, función de recarga activa, nuevas APIs para IoT y juegos, soporte desarrollo nativo en nube, integración Blazor WebAssembly. Mejoras en ASP.NET Core, Entity Framework Core y otros componentes del ecosistema.",
          "type": "qa"
        },
        {
          "id": "source-generators",
          "title": "Generadores de Código Fuente C# 9.0",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo mejoran los Source Generators la productividad?\n**Respuesta:** Permiten generar código fuente dinámicamente durante compilación. Automatizan tareas repetitivas, reducen código repetitivo. Ejemplos: implementar automáticamente métodos de interfaz, generar serialización/deserialización, crear proxies para RPC. Minimizan errores humanos, garantizan consistencia y aceleran desarrollo.",
          "type": "qa"
        },
        {
          "id": "memory-span-tipos",
          "title": "Tipos Memory<T> y Span<T>",
          "level": 3,
          "content": "**Pregunta:** ¿Cuáles son las ventajas de Memory<T> y Span<T> en alto rendimiento?\n**Respuesta:** **Asignaciones reducidas:** Span<T> permite acceso directo a regiones de memoria sin copias intermedias. **Procesamiento eficiente:** Métodos para segmentar, indexar e iterar sin crear nuevos objetos. **Interoperabilidad mejorada:** Facilita trabajo con código no administrado. **Rendimiento concurrente:** Acceso concurrente por naturaleza estructural.",
          "type": "qa"
        },
        {
          "id": "worker-service-template",
          "title": "Plantilla Worker Service",
          "level": 3,
          "content": "**Pregunta:** Explique la plantilla Worker Service en .NET.\n**Respuesta:** Plantilla para crear servicios en segundo plano o procesos de larga duración. Proporciona marco para procesamiento background: tareas programadas, consumidores de colas, procesamiento basado en eventos. Gestiona hosting y ciclo de vida. Hereda de BackgroundService, sobrescribe ExecuteAsync para definir tarea background.",
          "type": "qa"
        },
        {
          "id": "system-device-gpio",
          "title": "System.Device.Gpio para IoT",
          "level": 3,
          "content": "**Pregunta:** ¿Cuál es el propósito de System.Device.Gpio en IoT?\n**Respuesta:** Proporciona clases para interactuar con pines GPIO en dispositivos IoT. Permite leer/escribir pines GPIO, controlar dispositivos externos, integrar componentes hardware. Usa GpioController para controlar pines en dispositivos como Raspberry Pi.",
          "type": "qa"
        },
        {
          "id": "minimal-apis",
          "title": "APIs Mínimas ASP.NET Core 6.0",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo simplifican las APIs mínimas el desarrollo web?\n**Respuesta:** Enfoque que simplifica creación de aplicaciones web ligeras. Permite definir rutas, gestionar solicitudes y crear APIs con mínima configuración. Reduce código repetitivo, código más conciso y legible. Útil para microservicios, servicios pequeños y prototipado rápido.",
          "type": "qa"
        },
        {
          "id": "ef-core-6-mejoras",
          "title": "Entity Framework Core 6.0 Mejoras",
          "level": 3,
          "content": "**Pregunta:** ¿Cuáles son las mejoras en Entity Framework Core 6.0?\n**Respuesta:** Mejor rendimiento, soporte más proveedores de BD, traducción LINQ optimizada, diagnósticos de rendimiento de consultas más precisos, API DbContext más flexible, seguimiento de eventos optimizado, gestión de migraciones simplificada. Características impulsadas por comunidad y feedback de usuarios.",
          "type": "qa"
        },
        {
          "id": "blazor-server-vs-client",
          "title": "Blazor Server vs Client",
          "level": 3,
          "content": "**Pregunta:** Explique Blazor Server vs Blazor Client y sus casos de uso.\n**Respuesta:** **Blazor Server:** Ejecuta lógica en servidor, usa SignalR para comunicación cliente-servidor. Cada interacción requiere ida y vuelta al servidor. Ideal para consistencia inmediata y conexión confiable. **Blazor Client (WebAssembly):** Ejecuta en navegador vía WebAssembly. Aplicación completa se descarga, puede funcionar offline. Ideal para experiencia rica, interactiva y baja latencia.",
          "type": "qa"
        },
        {
          "id": "coreclr-multiplataforma",
          "title": "CoreCLR en Desarrollo Multiplataforma",
          "level": 3,
          "content": "**Pregunta:** ¿Cuál es el papel de CoreCLR en desarrollo multiplataforma?\n**Respuesta:** Motor de ejecución de .NET Core. Proporciona infraestructura para ejecutar código administrado: compilación JIT, recolección de basura, manejo de excepciones. Abstrae detalles específicos de plataforma, proporciona entorno consistente en Windows, macOS, Linux. Permite desarrollar en una plataforma y ejecutar en otra sin modificar código.",
          "type": "qa"
        },
        {
          "id": "microservicios-implementacion",
          "title": "Implementación de Microservicios en .NET",
          "level": 3,
          "content": "**Pregunta:** Explique microservicios y su implementación en .NET.\n**Respuesta:** Arquitectura de servicios pequeños, autónomos y débilmente acoplados. Cada servicio corresponde a funcionalidad específica, se desarrolla/despliega/escala independientemente. En .NET se implementan con ASP.NET Core. Beneficios: modularidad, escalabilidad, aislamiento de fallos. Se integra con Docker y Kubernetes para orquestación.",
          "type": "qa"
        },
        {
          "id": "httpclientfactory",
          "title": "HttpClientFactory en .NET Core",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo usar HttpClientFactory para crear HttpClient?\n**Respuesta:** Clase factory que facilita creación/administración de instancias HttpClient. Soluciona problemas como agotamiento de sockets. Proporciona ubicación central para nombrar y configurar clientes lógicos. Se registra en ConfigureServices, se inyecta IHttpClientFactory, se usa CreateClient() para obtener instancias configuradas.",
          "type": "qa"
        },
        {
          "id": "grpc-caracteristicas",
          "title": "Características de gRPC en .NET",
          "level": 3,
          "content": "**Pregunta:** ¿Cuáles son las características principales de gRPC en .NET?\n**Respuesta:** Framework RPC de alto rendimiento. **Características:** Soporte multiplataforma/multilenguaje, comunicación eficiente con Protocol Buffers (binario), streaming bidireccional, desarrollo basado en contratos, integración nativa con .NET Core 3.0+. Se integra con pipeline ASP.NET Core, configuración, logging, DI. Usa HTTP/2 para transporte.",
          "type": "qa"
        },
        {
          "id": "serverless-azure-functions",
          "title": "Computación Serverless y Azure Functions",
          "level": 3,
          "content": "**Pregunta:** Explique computación serverless e integración con Azure Functions.\n**Respuesta:** **Serverless:** Modelo donde proveedor cloud gestiona dinámicamente servidores. Desarrolladores se enfocan en código, no infraestructura. **Azure Functions:** Servicio serverless de Microsoft, permite crear funciones basadas en eventos que escalan automáticamente. Se integra con .NET, responde a triggers (HTTP, timer, queue). Rentable: pago por tiempo de ejecución.",
          "type": "qa"
        },
        {
          "id": "tpl-dataflow",
          "title": "TPL Dataflow",
          "level": 3,
          "content": "**Pregunta:** ¿Cuál es el papel de TPL Dataflow en pipelines de datos?\n**Respuesta:** Biblioteca para crear canales de procesamiento de datos escalables y concurrentes. Proporciona componentes dataflow para gestionar paralelismo, almacenamiento en buffer, sincronización. Modela operaciones como transformaciones de datos (bloques dataflow). Los bloques se combinan formando pipeline, cada uno procesa independiente y concurrentemente.",
          "type": "qa"
        },
        {
          "id": "system-text-json-vs-newtonsoft",
          "title": "System.Text.Json vs Newtonsoft.Json",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo se compara System.Text.Json con Newtonsoft.Json?\n**Respuesta:** **System.Text.Json:** Nueva biblioteca en .NET Core+, prioriza rendimiento. Serialización/deserialización más rápida, API moderna, soporte asíncrono integrado, mayor integración con .NET. **Newtonsoft.Json:** Framework maduro, más características pero menor rendimiento. System.Text.Json recomendado para nuevos proyectos por rendimiento.",
          "type": "qa"
        },
        {
          "id": "reactive-extensions",
          "title": "Programación Reactiva con Rx",
          "level": 3,
          "content": "**Pregunta:** Explique programación reactiva y Reactive Extensions (Rx).\n**Respuesta:** **Programación reactiva:** Paradigma asíncrono enfocado en modelado/transformación de flujos de datos/eventos. **Rx.NET:** Biblioteca para programas asíncronos basados en eventos usando secuencias observables y operadores estilo LINQ. Proporciona IObservable/IObserver y operadores (Map, Filter, Reduce) para crear, transformar y suscribirse a secuencias.",
          "type": "qa"
        },
        {
          "id": "actor-model-orleans-proto",
          "title": "Modelo Actor con Orleans/Proto.Actor",
          "level": 3,
          "content": "**Pregunta:** ¿Cuáles son los beneficios del modelo Actor en sistemas distribuidos?\n**Respuesta:** **Beneficios:** Gestión de concurrencia simplificada (sin bloqueos), escalabilidad horizontal automática, tolerancia a fallos con supervisión, transparencia de ubicación, aislamiento entre actores, comunicación asíncrona sin bloqueos. **Orleans/Proto.Actor:** Frameworks .NET que implementan modelo Actor, gestionan ubicación, comunicación, balanceo de carga automáticamente.",
          "type": "qa"
        },
        {
          "id": "ef-core-optimizacion",
          "title": "Optimización de Consultas Entity Framework Core",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo permite EF Core optimización de consultas?\n**Respuesta:** **Técnicas:** Almacenamiento en caché de planes de consulta, carga diferida/entusiasta, operaciones por lotes, consultas SQL raw, indexación, optimizaciones específicas de BD. EF Core monitorea estado de esquema, permite cambios incrementales via migraciones. Admite FromSqlRaw para consultas optimizadas manualmente.",
          "type": "qa"
        },
        {
          "id": "simd-computing",
          "title": "SIMD en Computación de Alto Rendimiento",
          "level": 3,
          "content": "**Pregunta:** Explique SIMD en .NET y su importancia.\n**Respuesta:** **SIMD (Single Instruction, Multiple Data):** Técnica donde una instrucción opera sobre múltiples elementos simultáneamente. En .NET via System.Numerics. Permite aprovechar paralelismo hardware (instrucciones vectorizadas). Relevante en simulaciones numéricas, procesamiento de imágenes, algoritmos intensivos en datos. Mejora rendimiento computacional significativamente.",
          "type": "qa"
        },
        {
          "id": "docker-containers-dotnet",
          "title": "Contenedores Docker para .NET",
          "level": 3,
          "content": "**Pregunta:** ¿Cuáles son las ventajas de Docker para aplicaciones .NET?\n**Respuesta:** **Ventajas:** Despliegue consistente entre entornos, aislamiento de dependencias, escalabilidad mejorada (inicio/parada rápida), versionado/rollback sencillo, automatización de despliegue simplificada, utilización eficiente de recursos, facilita arquitectura microservicios. Contenedores comparten kernel OS, menos recursos que VMs completas.",
          "type": "qa"
        },
        {
          "id": "azure-devops-cicd",
          "title": "Azure DevOps para CI/CD .NET",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo facilita Azure DevOps CI/CD para proyectos .NET?\n**Respuesta:** Plataforma cloud para ciclo de vida completo. **Características:** Control de versiones (Azure Repos), pipelines de compilación automatizada, pipelines de release para deployment, gestión de artefactos (Azure Artifacts), capacidades de testing (Test Plans), integración con Azure. Proporciona plataforma unificada para colaboración y orquestación CI/CD.",
          "type": "qa"
        },
        {
          "id": "system-memory-span-performance",
          "title": "System.Memory y Span<T> para Alto Rendimiento",
          "level": 3,
          "content": "**Pregunta:** ¿Cuáles son las ventajas de System.Memory y Span<T>?\n**Respuesta:** **Ventajas:** Asignaciones de memoria reducidas (acceso directo sin copias), procesamiento de datos eficiente (segmentar, indexar, iterar sin nuevos objetos), interoperabilidad mejorada con código no administrado, rendimiento concurrente mejorado (naturaleza estructural elimina necesidad de locks).",
          "type": "qa"
        },
        {
          "id": "cloud-native-development",
          "title": "Desarrollo Cloud-Native en .NET",
          "level": 3,
          "content": "**Pregunta:** Explique desarrollo cloud-native en .NET y relación con contenedores/Kubernetes.\n**Respuesta:** **Cloud-native:** Crear aplicaciones diseñadas para aprovechar capacidades cloud. Usa prácticas modernas para aplicaciones escalables, resilientes, alta disponibilidad. **Contenedores/Kubernetes:** Contenedores ofrecen portabilidad/aislamiento, Kubernetes automatiza deployment/scaling/gestión. .NET Core, ASP.NET Core, EF Core diseñados para cloud-native, se integran fácilmente con Kubernetes.",
          "type": "qa"
        },
        {
          "id": "distributed-caching-techniques",
          "title": "Técnicas de Caché Distribuido en .NET",
          "level": 3,
          "content": "**Pregunta:** ¿Cuáles son las técnicas de caché distribuido en .NET?\n**Respuesta:** **Técnicas:** **Caché en memoria** (rápido, limitado a una instancia), **Redis** (distribuido, escalable, introduce latencia de red), **Frameworks distribuidos** (Microsoft.Extensions.Caching.Distributed, proveedores como Redis/SQL Server). Cada uno balancea entre rendimiento, escalabilidad y complejidad de configuración.",
          "type": "qa"
        },
        {
          "id": "quantum-computing-impact",
          "title": "Computación Cuántica e Impacto en .NET",
          "level": 3,
          "content": "**Pregunta:** Explique computación cuántica y su impacto potencial en .NET.\n**Respuesta:** **Computación cuántica:** Aprovecha mecánica cuántica para cálculos complejos. Usa qubits (múltiples estados simultáneos) vs bits tradicionales. **Impacto futuro en .NET:** Podrían surgir bibliotecas/frameworks cuánticos específicos, permitiendo programas cuánticos con lenguajes familiares. Desarrolladores necesitarán integrar sistemas clásicos/cuánticos en aplicaciones híbridas.",
          "type": "qa"
        },
        {
          "id": "ml-ai-frameworks",
          "title": "Marcos de Machine Learning e IA en .NET",
          "level": 3,
          "content": "**Pregunta:** ¿Cuáles son los beneficios de utilizar marcos de aprendizaje automático e IA como ML.NET o TensorFlow.NET?\n**Respuesta:** **Beneficios:** **Desarrollo simplificado** (APIs y abstracciones de alto nivel), **Familiaridad** (aprovechar conocimiento C#/.NET existente), **Integración ecosistema** (perfecto con bibliotecas, frameworks, servicios .NET), **Rendimiento/escalabilidad** (optimizaciones eficientes, soporte GPU), **Comunidad/soporte** (documentación extensa, recursos, tutoriales). Permite crear modelos ML/AI usando herramientas familiares sin cambiar stack tecnológico.",
          "type": "qa"
        }
      ]
    },
    {
      "id": "biometrika-preguntas-avanzadas",
      "title": "Biometrika - Preguntas Avanzadas",
      "level": 2,
      "subsections": [
        {
          "id": "biometric-algorithms-1",
          "title": "Algoritmos Biométricos",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo implementarías un sistema de matching biométrico con alta concurrencia?\n**Respuesta:** Pipeline asíncrono, parallel processing con Parallel.ForEach, algorithm optimization, caching de templates, database sharding por región biométrica, load balancing, timeout handling.",
          "type": "qa"
        },
        {
          "id": "digital-signature-implementation-2",
          "title": "Implementación Firma Digital",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo diseñas un sistema de firma electrónica seguro?\n**Respuesta:** PKI infrastructure, HSM para key storage, timestamping authority, certificate validation, revocation checking (OCSP), audit trail, compliance (eIDAS/ESIGN).",
          "type": "qa"
        },
        {
          "id": "identity-verification-workflow-3",
          "title": "Workflow Verificación Identidad",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo arquitectas un workflow completo de verificación de identidad?\n**Respuesta:** State machine pattern, workflow orchestration, liveness detection, document authentication, facial recognition, risk scoring, manual review escalation, compliance reporting.",
          "type": "qa"
        },
        {
          "id": "high-availability-system-4",
          "title": "Sistema Alta Disponibilidad",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo garantizas 99.9% uptime en un sistema crítico?\n**Respuesta:** Multi-region deployment, active-active clustering, database replication, circuit breakers, graceful degradation, health monitoring, automated failover, disaster recovery procedures.",
          "type": "qa"
        },
        {
          "id": "blockchain-integration-5",
          "title": "Integración Blockchain",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo integrarías blockchain para audit trail inmutable?\n**Respuesta:** Smart contracts para verification, IPFS para document storage, hash anchoring, merkle trees, gas optimization, private/consortium blockchain, oracle integration.",
          "type": "qa"
        },
        {
          "id": "ai-ml-biometrics-6",
          "title": "IA/ML en Biometría",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo implementas ML.NET para detección de deepfakes?\n**Respuesta:** Feature extraction, model training pipeline, real-time inference, confidence scoring, ensemble methods, continuous learning, adversarial training, model versioning.",
          "type": "qa"
        },
        {
          "id": "gdpr-compliance-7",
          "title": "Cumplimiento GDPR/Privacidad",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo aseguras cumplimiento GDPR en sistemas biométricos?\n**Respuesta:** Data minimization, purpose limitation, consent management, right to erasure, data portability, privacy by design, DPO involvement, regular audits, breach notification.",
          "type": "qa"
        },
        {
          "id": "realtime-processing-8",
          "title": "Procesamiento Tiempo Real",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo procesas miles de verificaciones biométricas simultáneas?\n**Respuesta:** Event streaming (Kafka), microservices scaling, async processing, message partitioning, distributed caching, load balancing algorithms, performance monitoring.",
          "type": "qa"
        },
        {
          "id": "government-integration-9",
          "title": "Integración Sistemas Gubernamentales",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo integras con sistemas legacy del sector público?\n**Respuesta:** SOAP/XML interoperability, secure file transfer, message queuing, API adapters, data transformation, legacy protocol support, certification compliance.",
          "type": "qa"
        },
        {
          "id": "fraud-detection-10",
          "title": "Detección de Fraude",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo implementas detección de fraude en tiempo real?\n**Respuesta:** Machine learning models, behavioral analytics, device fingerprinting, geolocation analysis, risk scoring algorithms, rule engines, alert systems, investigation workflows.",
          "type": "qa"
        },
        {
          "id": "mobile-biometrics-11",
          "title": "Biometría Móvil",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo optimizas algoritmos biométricos para dispositivos móviles?\n**Respuesta:** Edge computing, model compression, quantization, on-device processing, battery optimization, network resilience, progressive enhancement, fallback mechanisms.",
          "type": "qa"
        },
        {
          "id": "international-standards-12",
          "title": "Estándares Internacionales",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo aseguras compliance con estándares ISO 27001/19794?\n**Respuesta:** Security controls framework, biometric data formats, quality metrics, interoperability testing, certification processes, audit documentation, risk assessments.",
          "type": "qa"
        },
        {
          "id": "disaster-recovery-13",
          "title": "Disaster Recovery",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo diseñas disaster recovery para sistemas críticos?\n**Respuesta:** RTO/RPO definition, backup strategies, geo-replication, automated failover, testing procedures, communication plans, business continuity, data integrity verification.",
          "type": "qa"
        },
        {
          "id": "performance-optimization-14",
          "title": "Optimización Performance Extrema",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo optimizas para procesar 100K verificaciones/segundo?\n**Respuesta:** Memory-mapped files, unsafe code optimization, SIMD instructions, GPU processing, distributed computing, caching strategies, database partitioning, CDN usage.",
          "type": "qa"
        },
        {
          "id": "zero-trust-architecture-15",
          "title": "Arquitectura Zero Trust",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo implementas Zero Trust en infraestructura biométrica?\n**Respuesta:** Identity verification per request, least privilege access, micro-segmentation, continuous monitoring, device compliance, conditional access policies, threat detection.",
          "type": "qa"
        },
        {
          "id": "cloud-native-design-16",
          "title": "Diseño Cloud-Native",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo migras sistemas legacy a cloud-native?\n**Respuesta:** Strangler fig pattern, containerization, service mesh, infrastructure as code, observability, security scanning, gradual migration, rollback strategies.",
          "type": "qa"
        },
        {
          "id": "api-security-advanced-17",
          "title": "Seguridad API Avanzada",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo proteges APIs que manejan datos biométricos sensibles?\n**Respuesta:** mTLS, API keys rotation, OAuth 2.0/OIDC, rate limiting, IP whitelisting, request signing, data encryption at rest/transit, threat detection, WAF.",
          "type": "qa"
        },
        {
          "id": "distributed-consensus-18",
          "title": "Consenso Distribuido",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo implementas consenso en sistemas distribuidos críticos?\n**Respuesta:** Raft consensus, leader election, log replication, partition tolerance, eventual consistency, conflict resolution, distributed locks, state synchronization.",
          "type": "qa"
        },
        {
          "id": "quantum-cryptography-19",
          "title": "Criptografía Post-Cuántica",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo preparas sistemas para era post-cuántica?\n**Respuesta:** Algorithm agility, quantum-resistant algorithms (lattice-based), crypto inventory, migration planning, hybrid approaches, standards tracking (NIST), risk assessment.",
          "type": "qa"
        },
        {
          "id": "edge-computing-20",
          "title": "Edge Computing",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo implementas processing biométrico en edge?\n**Respuesta:** IoT Hub integration, offline capability, data synchronization, model deployment, resource constraints, security at edge, telemetry collection, remote management.",
          "type": "qa"
        },
        {
          "id": "advanced-monitoring-21",
          "title": "Monitoreo Avanzado",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo implementas observabilidad completa en sistemas complejos?\n**Respuesta:** OpenTelemetry, distributed tracing, metrics collection, log aggregation, anomaly detection, predictive alerting, dashboards, SRE practices, chaos engineering.",
          "type": "qa"
        },
        {
          "id": "multitenancy-design-22",
          "title": "Diseño Multi-tenant",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo diseñas arquitectura multi-tenant para clientes enterprise?\n**Respuesta:** Tenant isolation strategies, shared vs dedicated resources, data partitioning, configuration management, billing integration, customization support, SLA differentiation.",
          "type": "qa"
        },
        {
          "id": "event-sourcing-cqrs-23",
          "title": "Event Sourcing + CQRS",
          "level": 3,
          "content": "**Pregunta:** ¿Cuándo implementas Event Sourcing en sistemas biométricos?\n**Respuesta:** Audit requirements, temporal queries, replay capability, eventual consistency acceptable, complex business logic, regulatory compliance, event store design.",
          "type": "qa"
        },
        {
          "id": "capacity-planning-24",
          "title": "Planeación de Capacidad",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo planeas capacidad para crecimiento exponencial?\n**Respuesta:** Performance modeling, load testing, auto-scaling policies, resource forecasting, cost optimization, monitoring trends, capacity alerts, bottleneck analysis.",
          "type": "qa"
        },
        {
          "id": "regulatory-compliance-25",
          "title": "Compliance Regulatorio Múltiple",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo manejas compliance en múltiples jurisdicciones?\n**Respuesta:** Regulatory mapping, policy engines, configurable workflows, audit trails, data residency, jurisdiction-specific features, compliance dashboards, legal review processes.",
          "type": "qa"
        },
        {
          "id": "advanced-caching-26",
          "title": "Estrategias Caché Avanzadas",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo optimizas caching para datos biométricos únicos?\n**Respuesta:** Cache warming, intelligent prefetching, LRU with ML, distributed cache consistency, cache partitioning, invalidation strategies, performance metrics.",
          "type": "qa"
        },
        {
          "id": "advanced-testing-27",
          "title": "Testing Avanzado",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo testas sistemas biométricos complejos?\n**Respuesta:** Synthetic biometric data, chaos engineering, property-based testing, performance testing, security testing, A/B testing, canary deployments, monitoring in production.",
          "type": "qa"
        },
        {
          "id": "data-lake-architecture-28",
          "title": "Arquitectura Data Lake",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo diseñas data lake para analytics biométricos?\n**Respuesta:** Data partitioning, schema evolution, data governance, lifecycle management, privacy protection, query optimization, real-time streaming, ML pipeline integration.",
          "type": "qa"
        },
        {
          "id": "advanced-security-29",
          "title": "Seguridad Avanzada",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo implementas security-by-design en architectura compleja?\n**Respuesta:** Threat modeling, security controls framework, penetration testing, vulnerability management, security automation, incident response, security metrics, compliance automation.",
          "type": "qa"
        },
        {
          "id": "global-distribution-30",
          "title": "Distribución Global",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo diseñas sistema para operación global 24/7?\n**Respuesta:** Multi-region active-active, data replication strategies, global load balancing, latency optimization, local compliance, cultural considerations, timezone handling.",
          "type": "qa"
        },
        {
          "id": "advanced-devops-31",
          "title": "DevOps Avanzado",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo implementas GitOps para infraestructura crítica?\n**Respuesta:** Infrastructure as Code, declarative configuration, automated reconciliation, policy as code, security scanning, compliance checks, rollback mechanisms.",
          "type": "qa"
        },
        {
          "id": "legacy-modernization-32",
          "title": "Modernización Legacy",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo modernizas sistemas legacy sin interrumpir operaciones?\n**Respuesta:** Strangler fig pattern, API facade, data synchronization, feature flags, gradual migration, dual-write strategy, monitoring durante transición.",
          "type": "qa"
        },
        {
          "id": "advanced-ai-integration-33",
          "title": "Integración IA Avanzada",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo integras modelos de IA en pipelines de producción?\n**Respuesta:** ML model versioning, A/B testing models, model monitoring, drift detection, retraining automation, explainable AI, model governance, performance tracking.",
          "type": "qa"
        },
        {
          "id": "cost-optimization-34",
          "title": "Optimización de Costos",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo optimizas costos en cloud sin comprometer performance?\n**Respuesta:** Resource right-sizing, spot instances, reserved capacity, auto-scaling optimization, cost monitoring, usage analytics, architectural efficiency, vendor negotiation.",
          "type": "qa"
        },
        {
          "id": "advanced-analytics-35",
          "title": "Analytics Avanzado",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo implementas real-time analytics para negocio?\n**Respuesta:** Stream processing, real-time dashboards, anomaly detection, predictive analytics, data visualization, self-service BI, performance KPIs, business intelligence.",
          "type": "qa"
        },
        {
          "id": "vendor-agnostic-design-36",
          "title": "Diseño Vendor-Agnostic",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo evitas vendor lock-in en arquitectura cloud?\n**Respuesta:** Abstraction layers, standard APIs, containerization, infrastructure portability, multi-cloud strategy, open source preferences, exit planning.",
          "type": "qa"
        },
        {
          "id": "advanced-workflow-37",
          "title": "Workflows Complejos",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo orquestas workflows complejos con múltiples dependencias?\n**Respuesta:** Workflow engines (Azure Logic Apps), state machines, compensation patterns, long-running processes, human-in-the-loop, parallel execution, error recovery.",
          "type": "qa"
        },
        {
          "id": "technical-debt-management-38",
          "title": "Gestión Deuda Técnica",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo balanceas features vs deuda técnica?\n**Respuesta:** Technical debt metrics, refactoring planning, code quality gates, team education, business case for tech debt, incremental improvements, risk assessment.",
          "type": "qa"
        },
        {
          "id": "team-leadership-39",
          "title": "Liderazgo Técnico",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo lideras equipos técnicos en proyectos complejos?\n**Respuesta:** Technical vision, mentoring, code reviews, architecture decisions, technology evaluation, team communication, stakeholder management, knowledge sharing.",
          "type": "qa"
        },
        {
          "id": "innovation-implementation-40",
          "title": "Implementación de Innovación",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo evalúas e implementas nuevas tecnologías en producción?\n**Respuesta:** Technology radar, POC development, risk assessment, gradual adoption, training planning, migration strategy, success metrics, rollback plans.",
          "type": "qa"
        }
      ]
    },
    {
      "id": "logical-thinking",
      "title": "Logical Thinking",
      "level": 2,
      "subsections": [
        {
          "id": "sogas-tiempo-1",
          "title": "Medición con Sogas",
          "level": 3,
          "content": "**Pregunta:** Si tienes 2 sogas que tardan 1 hora en quemarse, pero no lo hacen de forma uniforme, ¿cómo medirías 45 minutos?\n**Respuesta:** Enciendes la primera por ambos extremos y la segunda por un extremo. Cuando la primera se consuma (30 min), enciendes el otro extremo de la segunda. Esa segunda parte se quema en 15 min → total 45 min.",
          "type": "qa"
        },
        {
          "id": "velocidad-tren-2",
          "title": "Velocidad del Tren",
          "level": 3,
          "content": "**Pregunta:** Un tren tarda 1 hora en recorrer 60 km. ¿Cuál es su velocidad promedio?\n**Respuesta:** 60 km/h.",
          "type": "qa"
        },
        {
          "id": "bolas-balanza-3",
          "title": "Problema de las 8 Bolas",
          "level": 3,
          "content": "**Pregunta:** Tienes 8 bolas, una es más pesada. ¿Cómo la identificas en solo 2 pesadas con balanza?\n**Respuesta:** Divides en 3 grupos (3, 3, 2). Primera pesada: comparas 3 vs 3. Si iguales, la pesada está en las 2 restantes → comparas esas 2. Si diferentes, tomas las 3 más pesadas y comparas 1 vs 1.",
          "type": "qa"
        },
        {
          "id": "induccion-deduccion-4",
          "title": "Inducción vs Deducción",
          "level": 3,
          "content": "**Pregunta:** Explica la diferencia entre inducción y deducción en razonamiento lógico.\n**Respuesta:** Inducción: parte de casos específicos para inferir una regla general. Deducción: parte de una regla general para derivar casos específicos.",
          "type": "qa"
        },
        {
          "id": "maquinas-productos-5",
          "title": "Máquinas y Productos",
          "level": 3,
          "content": "**Pregunta:** Si 5 máquinas hacen 5 productos en 5 minutos, ¿cuánto tardan 100 máquinas en hacer 100 productos?\n**Respuesta:** 5 minutos (todas producen en paralelo).",
          "type": "qa"
        },
        {
          "id": "escalera-fibonacci-6",
          "title": "Escalera de 10 Peldaños",
          "level": 3,
          "content": "**Pregunta:** Si subes una escalera de 10 peldaños y puedes avanzar 1 o 2 cada vez, ¿cuántas formas hay?\n**Respuesta:** Es la serie de Fibonacci. Para 10 → 89 formas.",
          "type": "qa"
        },
        {
          "id": "complejidad-algoritmica-7",
          "title": "Complejidad de Algoritmos",
          "level": 3,
          "content": "**Pregunta:** Un programador tiene que procesar 1M registros. Opción A: O(n). Opción B: O(n log n). ¿Cuál es mejor?\n**Respuesta:** O(n) → escala lineal, más eficiente que O(n log n).",
          "type": "qa"
        },
        {
          "id": "serie-numerica-8",
          "title": "Serie Numérica",
          "level": 3,
          "content": "**Pregunta:** Encuentra el siguiente número en la serie: 2, 6, 12, 20, 30, ?\n**Respuesta:** Diferencias: +4, +6, +8, +10… Siguiente = 30 + 12 = 42.",
          "type": "qa"
        },
        {
          "id": "probabilidad-moneda-9",
          "title": "Probabilidad con Monedas",
          "level": 3,
          "content": "**Pregunta:** Si lanzas una moneda justa 3 veces, ¿probabilidad de obtener exactamente 2 caras?\n**Respuesta:** Combinaciones: 3. Total posibles: 8. Probabilidad = 3/8.",
          "type": "qa"
        },
        {
          "id": "interruptores-ampolleta-10",
          "title": "Problema de los Interruptores",
          "level": 3,
          "content": "**Pregunta:** Tienes 3 interruptores y 1 ampolleta en otra habitación. ¿Cómo identificas cuál enciende la ampolleta entrando una sola vez?\n**Respuesta:** Enciendes el 1° un rato y lo apagas. Dejas el 2° encendido. Entras: Encendida → 2°. Apagada pero caliente → 1°. Apagada y fría → 3°.",
          "type": "qa"
        },
        {
          "id": "ecuacion-simple-11",
          "title": "Ecuación Simple",
          "level": 3,
          "content": "**Pregunta:** Si duplicas un número y luego le sumas 10, obtienes 30. ¿Cuál es el número?\n**Respuesta:** 2x + 10 = 30 → x = 10.",
          "type": "qa"
        },
        {
          "id": "programadores-modulo-12",
          "title": "Programadores y Módulos",
          "level": 3,
          "content": "**Pregunta:** Si 3 programadores hacen un módulo en 6 días, ¿cuántos programadores necesitas para hacerlo en 2 días?\n**Respuesta:** Trabajo total = 18 jornadas. En 2 días → 9 programadores.",
          "type": "qa"
        },
        {
          "id": "grafo-bipartito-13",
          "title": "Grafo Bipartito",
          "level": 3,
          "content": "**Pregunta:** ¿Por qué un grafo bipartito no puede tener ciclos impares?\n**Respuesta:** Porque se alternan 2 colores. Un ciclo impar rompe la alternancia → contradicción.",
          "type": "qa"
        },
        {
          "id": "botellas-veneno-14",
          "title": "Problema de las Botellas",
          "level": 3,
          "content": "**Pregunta:** Tienes 1000 botellas, una con veneno. Un ratón muere en 24h al beber. ¿Cómo encuentras la botella en 10 días con el menor número de ratones?\n**Respuesta:** Usas codificación binaria. Con 10 ratones puedes identificar hasta 2^10 = 1024 botellas.",
          "type": "qa"
        },
        {
          "id": "api-rate-limiting-15",
          "title": "Estrategia API",
          "level": 3,
          "content": "**Pregunta:** En una API REST, si recibes demasiadas requests, ¿qué estrategia aplicarías para evitar caída?\n**Respuesta:** Rate limiting, throttling, circuit breakers.",
          "type": "qa"
        },
        {
          "id": "acertijo-retrato-16",
          "title": "Acertijo del Retrato",
          "level": 3,
          "content": "**Pregunta:** Un hombre mira un retrato y dice: \"No tengo hermanos ni hermanas, pero el padre de ese hombre es el hijo de mi padre\". ¿Quién está en el retrato?\n**Respuesta:** Su hijo.",
          "type": "qa"
        },
        {
          "id": "hash-dictionary-17",
          "title": "Diccionario Hash",
          "level": 3,
          "content": "**Pregunta:** Explica por qué un diccionario hash promedio tiene O(1) en búsqueda.\n**Respuesta:** Distribuye claves en buckets con hash function. Acceso directo → O(1) promedio. Peor caso O(n).",
          "type": "qa"
        },
        {
          "id": "red-colisiones-18",
          "title": "Colisiones en Red",
          "level": 3,
          "content": "**Pregunta:** En una red, ¿qué pasa si todos los nodos intentan transmitir al mismo tiempo?\n**Respuesta:** Colisión. Se usan algoritmos como CSMA/CD o colas para resolver.",
          "type": "qa"
        },
        {
          "id": "recipientes-agua-19",
          "title": "Problema de los Recipientes",
          "level": 3,
          "content": "**Pregunta:** Tienes 3 recipientes de 8, 5 y 3 litros. ¿Cómo obtienes 4 litros exactos?\n**Respuesta:** Llena el de 5 → pásalo al de 3 (quedan 2). Vacía el de 3. Pasa los 2 al de 3. Llena el de 5 otra vez. Vierte en el de 3 (queda con 1 espacio). Quedan 4 exactos en el de 5.",
          "type": "qa"
        },
        {
          "id": "bug-intermitente-20",
          "title": "Debug de Bug Intermitente",
          "level": 3,
          "content": "**Pregunta:** ¿Qué estrategia usarías para depurar un bug intermitente en producción?\n**Respuesta:** Logging detallado con correlación, monitoreo en tiempo real, feature flags para aislar casos, reproducción controlada.",
          "type": "qa"
        },
        {
          "id": "sewer-covers-21",
          "title": "Tapas de Alcantarilla",
          "level": 3,
          "content": "**Pregunta:** ¿Por qué las tapas de alcantarilla son redondas?\n**Respuesta:** Las tapas redondas son más fáciles de usar y seguras. No necesitas rotarlas para colocarlas y no pueden caer en el agujero si se voltean, mientras que una tapa cuadrada podría caer diagonalmente.",
          "type": "qa"
        },
        {
          "id": "light-bulbs-22",
          "title": "Bombillas y Interruptores",
          "level": 3,
          "content": "**Pregunta:** Estás en una habitación con tres interruptores. Cada uno corresponde a una bombilla diferente en otra habitación que no puedes ver. Si todos los interruptores están apagados, ¿cómo averiguas cuál enciende cuál bombilla?\n**Respuesta:** Encendería un interruptor y lo dejaría unos minutos. Cuando lo apague, rápidamente encendería otro interruptor. Iría a la habitación para ver qué luz se encendió del segundo interruptor y tocaría las otras bombillas para sentir cuál está más caliente (el primer interruptor). El tercer interruptor pertenece a la bombilla que está apagada y fría.",
          "type": "qa"
        },
        {
          "id": "four-names-23",
          "title": "Cuatro Nombres",
          "level": 3,
          "content": "**Pregunta:** La madre de Jane tiene cuatro hijos. Sus nombres son Primavera, Verano y Otoño. ¿Cuál es el nombre del cuarto hijo?\n**Respuesta:** Es Jane, porque se menciona al inicio de la pregunta.",
          "type": "qa"
        },
        {
          "id": "weather-forecast-24",
          "title": "Pronóstico del Tiempo",
          "level": 3,
          "content": "**Pregunta:** Viajas a Jaipur a visitar amigos y llamas a los tres para preguntar si está lloviendo en la ciudad. ¿Cuál es la probabilidad de que realmente esté lloviendo en Jaipur?\n**Respuesta:** Solo un amigo necesita ser honesto para que esté lloviendo, así que es más fácil calcular la probabilidad de que los tres amigos mientan sobre la lluvia, que es un tercio. Multiplicando eso obtengo una probabilidad de un veintisieteavo de que los tres mientan, lo que significa que hay un 96% de probabilidad de que realmente esté lloviendo.",
          "type": "qa"
        },
        {
          "id": "dice-rolling-25",
          "title": "Dados",
          "level": 3,
          "content": "**Pregunta:** Lanzas dos dados. ¿Cuál es la probabilidad de obtener un dos en el segundo lanzamiento?\n**Respuesta:** La probabilidad de sacar un dos en cualquier dado es 1/6. Esa sería la misma para el segundo lanzamiento también, independiente del primer resultado. La respuesta es 1/6.",
          "type": "qa"
        },
        {
          "id": "water-jugs-26",
          "title": "Jarras de Agua",
          "level": 3,
          "content": "**Pregunta:** Tienes jarras de agua, una de 3 galones y otra de 5 galones. ¿Cómo puedes medir exactamente 4 galones de agua?\n**Respuesta:** Llenaría la jarra de 3 galones y la vertería en la de 5 galones. Llenaría la de 3 galones otra vez y la vertería en la de 5 galones hasta llenarla, dejando 1 galón en la jarra de 3 galones. Vaciaría la jarra de 5 galones, vertería el 1 galón en ella, luego llenaría la jarra de 3 galones y la agregaría a la de 5 galones que ahora tiene 4 galones en total.",
          "type": "qa"
        },
        {
          "id": "airplane-pingpong-27",
          "title": "Pelotas de Ping Pong en Avión",
          "level": 3,
          "content": "**Pregunta:** ¿Cuántas pelotas de ping pong caben en un avión?\n**Respuesta:** Necesito conocer primero el volumen de una pelota de ping pong y el volumen interior del avión específico en cuestión. Luego puedo dividir el volumen del avión por el volumen de una pelota para obtener una estimación de cuántas pelotas caben adentro.",
          "type": "qa"
        },
        {
          "id": "stacking-coins-28",
          "title": "Apilando Monedas",
          "level": 3,
          "content": "**Pregunta:** ¿Cuántas rupias apiladas una encima de otra se necesitan para alcanzar la cima del Palacio Real?\n**Respuesta:** Necesitaría saber qué tan alto es el Palacio Real y qué tan alta es una rupia cuando está acostada. Asumiendo que es medio centímetro de alto, dividiría la altura del Palacio Real por la altura de una rupia para obtener el número que necesitaría apilar.",
          "type": "qa"
        },
        {
          "id": "fruit-prices-29",
          "title": "Precios de Frutas",
          "level": 3,
          "content": "**Pregunta:** ¿Cuánto cuesta una pera si una manzana cuesta 40 rupias, un plátano 60 rupias y una toronja 80 rupias?\n**Respuesta:** Contando las vocales de cada palabra de fruta, parece que cada vocal vale 20 rupias, así que una pera cuesta 40 rupias.",
          "type": "qa"
        },
        {
          "id": "sum-1-to-100-30",
          "title": "Suma de 1 a 100",
          "level": 3,
          "content": "**Pregunta:** ¿Cuál es la suma cuando totalizas los números del 1 al 100?\n**Respuesta:** Usando la fórmula n(n+1)/2: 100×101/2 = 5050.",
          "type": "qa"
        },
        {
          "id": "clock-angle-31",
          "title": "Ángulo del Reloj",
          "level": 3,
          "content": "**Pregunta:** ¿Cuál es el ángulo entre la manecilla de la hora y el minuto en un reloj a las 9 a.m.?\n**Respuesta:** A las 9:00, la manecilla de la hora está en 9 y la del minuto en 12. Cada hora representa 30° (360°/12). El ángulo es 3×30° = 90°.",
          "type": "qa"
        },
        {
          "id": "number-series-1-32",
          "title": "Serie Numérica 1",
          "level": 3,
          "content": "**Pregunta:** En esta serie, ¿qué número sigue: 2, 1, 3, 2, 4, 3?\n**Respuesta:** El patrón es: número par, número par-1, número par+1, número par, etc. Siguiente sería 5.",
          "type": "qa"
        },
        {
          "id": "number-series-2-33",
          "title": "Serie Numérica 2",
          "level": 3,
          "content": "**Pregunta:** En esta serie, ¿qué número sigue: 2, 1, 1/2, 1/4?\n**Respuesta:** Cada número se divide por 2. Siguiente sería 1/8.",
          "type": "qa"
        },
        {
          "id": "letter-series-34",
          "title": "Serie de Letras",
          "level": 3,
          "content": "**Pregunta:** En esta serie, ¿qué letra sigue: Y, Z, V, W, S, T, P, Q?\n**Respuesta:** Patrón: retrocede 3, avanza 1, retrocede 3, avanza 1. Después de Q vendría M (retrocede 3), luego N (avanza 1).",
          "type": "qa"
        },
        {
          "id": "verb-odd-out-35",
          "title": "Verbo Diferente",
          "level": 3,
          "content": "**Pregunta:** ¿Qué verbo no pertenece a esta lista: Pelear, Enseñar, Pensar, Dibujar, Atrapar, Comprar?\n**Respuesta:** 'Pensar' es el único que no requiere acción física visible o interacción con objetos externos.",
          "type": "qa"
        },
        {
          "id": "climbing-wall-36",
          "title": "Escalar Pared",
          "level": 3,
          "content": "**Pregunta:** Imagina que estás al pie de una pared de 6 metros. Cada hora subes un metro pero te deslizas dos hacia abajo. ¿Cuánto tiempo hasta llegar a la cima?\n**Respuesta:** Nunca llegarías a la cima porque cada hora retrocedes 1 metro neto (subes 1, bajas 2 = -1 metro neto).",
          "type": "qa"
        },
        {
          "id": "farmer-river-37",
          "title": "Granjero y el Río",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo puede un granjero cruzar el río de forma segura con un zorro, un pollo y una bolsa de maíz si solo puede llevar un artículo a la vez?\n**Respuesta:** 1) Lleva el pollo primero. 2) Regresa solo. 3) Lleva el zorro, pero trae de vuelta el pollo. 4) Deja el pollo, lleva el maíz. 5) Regresa solo. 6) Lleva el pollo.",
          "type": "qa"
        },
        {
          "id": "test-calculator-38",
          "title": "Probar Calculadora",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo probarías mejor una calculadora?\n**Respuesta:** Probaría operaciones básicas (+, -, ×, ÷), casos extremos (división por cero, números muy grandes), funciones especiales, precisión decimal, y usabilidad de la interfaz.",
          "type": "qa"
        },
        {
          "id": "traffic-lights-india-39",
          "title": "Semáforos en India",
          "level": 3,
          "content": "**Pregunta:** ¿Cuántos semáforos hay en total en India?\n**Respuesta:** Estimaría basándome en: número de ciudades principales, intersecciones por ciudad, densidad urbana. Aproximadamente 500,000-1,000,000 semáforos considerando todas las ciudades.",
          "type": "qa"
        },
        {
          "id": "barbers-mumbai-40",
          "title": "Peluqueros en Mumbai",
          "level": 3,
          "content": "**Pregunta:** ¿Cuántos peluqueros hay en Mumbai?\n**Respuesta:** Mumbai tiene ~20 millones de habitantes. Asumiendo 1 peluquero por cada 500-1000 personas, estimaría entre 20,000-40,000 peluqueros.",
          "type": "qa"
        },
        {
          "id": "goats-delhi-41",
          "title": "Cabras en Nueva Delhi",
          "level": 3,
          "content": "**Pregunta:** ¿Cuántas cabras hay en Nueva Delhi?\n**Respuesta:** Delhi es mayormente urbano. Estimando granjas periféricas y algunas urbanas, quizás 50,000-100,000 cabras en toda la región metropolitana.",
          "type": "qa"
        },
        {
          "id": "trees-gir-park-42",
          "title": "Árboles en Parque Gir",
          "level": 3,
          "content": "**Pregunta:** ¿Cuántos árboles hay en el Parque Nacional Gir?\n**Respuesta:** Gir tiene ~1400 km². Asumiendo densidad de bosque seco con ~200-500 árboles por hectárea, estimaría 28-70 millones de árboles.",
          "type": "qa"
        },
        {
          "id": "paint-taj-mahal-43",
          "title": "Pintar el Taj Mahal",
          "level": 3,
          "content": "**Pregunta:** ¿Cuántos litros se necesitan para pintar el Taj Mahal?\n**Respuesta:** Calculando superficie total (paredes, cúpulas, minaretes) ~50,000 m². Con 2-3 capas a 1 litro por 10m², necesitaríamos aproximadamente 10,000-15,000 litros.",
          "type": "qa"
        },
        {
          "id": "fast-meal-44",
          "title": "Comida FAST",
          "level": 3,
          "content": "**Pregunta:** ¿Qué comida representa esto: FAST?\n**Respuesta:** Breakfast (desayuno) - porque breaking (romper) the FAST (ayuno) de la noche.",
          "type": "qa"
        },
        {
          "id": "doctor-son-45",
          "title": "Hijo del Doctor",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo es posible que el padre del hijo de un doctor no sea doctor?\n**Respuesta:** El doctor es mujer. El padre del hijo del doctor sería el esposo de la doctora, quien no necesariamente es doctor.",
          "type": "qa"
        },
        {
          "id": "goats-remain-46",
          "title": "Cabras que Quedan",
          "level": 3,
          "content": "**Pregunta:** Un granjero tiene 15 cabras y todas menos nueve mueren. ¿Cuántas quedan?\n**Respuesta:** Nueve cabras quedan vivas ('todas menos nueve' significa que 9 sobreviven).",
          "type": "qa"
        },
        {
          "id": "three-pills-47",
          "title": "Tres Pastillas",
          "level": 3,
          "content": "**Pregunta:** Un doctor dice toma estas tres pastillas, una cada media hora. ¿Cuántos minutos en total hasta terminar?\n**Respuesta:** 60 minutos. Tomas la primera ahora (0 min), la segunda a los 30 min, y la tercera a los 60 min.",
          "type": "qa"
        },
        {
          "id": "dead-field-48",
          "title": "Hombre Muerto en Campo",
          "level": 3,
          "content": "**Pregunta:** Un hombre está muerto en medio de un campo, en un charco, usando un traje de buzo. ¿Cómo murió?\n**Respuesta:** Fue recogido accidentalmente por un helicóptero contra incendios que recolectaba agua del mar/lago y fue arrojado durante la extinción del incendio.",
          "type": "qa"
        },
        {
          "id": "woman-age-49",
          "title": "Mujer de 30 Años",
          "level": 3,
          "content": "**Pregunta:** Una mujer nacida en 1945 tiene solo 30 años ahora, ¿cómo es posible?\n**Respuesta:** Nació en la habitación 1945 del hospital, no en el año 1945.",
          "type": "qa"
        },
        {
          "id": "four-legs-one-foot-50",
          "title": "Cuatro Patas Un Pie",
          "level": 3,
          "content": "**Pregunta:** ¿Qué tiene cuatro patas pero solo un pie?\n**Respuesta:** Una cama (tiene cuatro patas y un pie de medida de longitud).",
          "type": "qa"
        },
        {
          "id": "basketballs-school-bus-51",
          "title": "Balones en Autobús",
          "level": 3,
          "content": "**Pregunta:** ¿Cuántos balones de básquetbol caben en un autobús escolar?\n**Respuesta:** Autobús escolar ~250m³, balón de básquetbol ~0.007m³. Aproximadamente 35,000 balones considerando espacio y empaque eficiente.",
          "type": "qa"
        },
        {
          "id": "scissors-pizza-delivery-52",
          "title": "Tijeras Repartidor Pizza",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo te beneficiarías de llevar tijeras como repartidor de pizza?\n**Respuesta:** Para cortar cintas de empaque, abrir cajas difíciles, cortar hilos de bolsas de entrega, y en emergencias para liberar cinturones de seguridad.",
          "type": "qa"
        },
        {
          "id": "potatoes-french-fries-53",
          "title": "Papas para Papas Fritas",
          "level": 3,
          "content": "**Pregunta:** ¿Cuántos kilogramos de papas venden las cadenas de comida rápida en India al año para papas fritas?\n**Respuesta:** Estimando consumo per cápita, número de restaurantes, y frecuencia de compra, aproximadamente 500,000-1,000,000 toneladas anuales.",
          "type": "qa"
        },
        {
          "id": "refrigerator-light-54",
          "title": "Luz del Refrigerador",
          "level": 3,
          "content": "**Pregunta:** ¿Cómo puedes saber si la luz dentro de un refrigerador está encendida o apagada?\n**Respuesta:** Colocar una cámara dentro antes de cerrar, usar un espejo pequeño para ver dentro mientras se cierra lentamente, o verificar el interruptor de la puerta.",
          "type": "qa"
        }
      ]
    }
  ]
}
